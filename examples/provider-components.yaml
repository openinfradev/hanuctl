apiVersion: v1
kind: Namespace
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: taco-cluster
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: cabpk-controller-manager
  name: cabpk-system
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: cluster-api-controller-manager
  name: capi-system
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: capo-controller-manager
  name: capo-system
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: clusters.cluster.x-k8s.io
spec:
  additionalPrinterColumns:
  - JSONPath: .status.phase
    description: Cluster status such as Pending/Provisioning/Provisioned/Deleting/Failed
    name: Phase
    type: string
  group: cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: Cluster
    listKind: ClusterList
    plural: clusters
    shortNames:
    - cl
    singular: cluster
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: Cluster is the Schema for the clusters API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: ClusterSpec defines the desired state of Cluster
          properties:
            clusterNetwork:
              description: Cluster network configuration
              properties:
                apiServerPort:
                  description: APIServerPort specifies the port the API Server should
                    bind to. Defaults to 6443.
                  format: int32
                  type: integer
                pods:
                  description: The network ranges from which Pod networks are allocated.
                  properties:
                    cidrBlocks:
                      items:
                        type: string
                      type: array
                  required:
                  - cidrBlocks
                  type: object
                serviceDomain:
                  description: Domain name for services.
                  type: string
                services:
                  description: The network ranges from which service VIPs are allocated.
                  properties:
                    cidrBlocks:
                      items:
                        type: string
                      type: array
                  required:
                  - cidrBlocks
                  type: object
              type: object
            infrastructureRef:
              description: InfrastructureRef is a reference to a provider-specific
                resource that holds the details for provisioning infrastructure for
                a cluster in said provider.
              properties:
                apiVersion:
                  description: API version of the referent.
                  type: string
                fieldPath:
                  description: 'If referring to a piece of an object instead of an
                    entire object, this string should contain a valid JSON/Go field
                    access statement, such as desiredState.manifest.containers[2].
                    For example, if the object reference is to a container within
                    a pod, this would take on a value like: "spec.containers{name}"
                    (where "name" refers to the name of the container that triggered
                    the event) or if no container name is specified "spec.containers[2]"
                    (container with index 2 in this pod). This syntax is chosen only
                    to have some well-defined way of referencing a part of an object.
                    TODO: this design is not final and this field is subject to change
                    in the future.'
                  type: string
                kind:
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                  type: string
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                  type: string
                namespace:
                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                  type: string
                resourceVersion:
                  description: 'Specific resourceVersion to which this reference is
                    made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency'
                  type: string
                uid:
                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                  type: string
              type: object
          type: object
        status:
          description: ClusterStatus defines the observed state of Cluster
          properties:
            apiEndpoints:
              description: APIEndpoints represents the endpoints to communicate with
                the control plane.
              items:
                description: APIEndpoint represents a reachable Kubernetes API endpoint.
                properties:
                  host:
                    description: The hostname on which the API server is serving.
                    type: string
                  port:
                    description: The port on which the API server is serving.
                    type: integer
                required:
                - host
                - port
                type: object
              type: array
            controlPlaneInitialized:
              description: ControlPlaneInitialized defines if the control plane has
                been initialized.
              type: boolean
            errorMessage:
              description: ErrorMessage indicates that there is a problem reconciling
                the state, and will be set to a descriptive error message.
              type: string
            errorReason:
              description: ErrorReason indicates that there is a problem reconciling
                the state, and will be set to a token value suitable for programmatic
                interpretation.
              type: string
            infrastructureReady:
              description: InfrastructureReady is the state of the infrastructure
                provider.
              type: boolean
            phase:
              description: Phase represents the current phase of cluster actuation.
                E.g. Pending, Running, Terminating, Failed etc.
              type: string
          type: object
      type: object
  version: v1alpha2
  versions:
  - name: v1alpha2
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: kubeadmconfigs.bootstrap.cluster.x-k8s.io
spec:
  group: bootstrap.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: KubeadmConfig
    listKind: KubeadmConfigList
    plural: kubeadmconfigs
    singular: kubeadmconfig
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: KubeadmConfig is the Schema for the kubeadmconfigs API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: KubeadmConfigSpec defines the desired state of KubeadmConfig.
            Either ClusterConfiguration and InitConfiguration should be defined or
            the JoinConfiguration should be defined.
          properties:
            clusterConfiguration:
              description: ClusterConfiguration along with InitConfiguration are the
                configurations necessary for the init command
              properties:
                apiServer:
                  description: APIServer contains extra settings for the API server
                    control plane component
                  properties:
                    certSANs:
                      description: CertSANs sets extra Subject Alternative Names for
                        the API Server signing cert.
                      items:
                        type: string
                      type: array
                    extraArgs:
                      additionalProperties:
                        type: string
                      description: 'ExtraArgs is an extra set of flags to pass to
                        the control plane component. TODO: This is temporary and ideally
                        we would like to switch all components to use ComponentConfig
                        + ConfigMaps.'
                      type: object
                    extraVolumes:
                      description: ExtraVolumes is an extra set of host volumes, mounted
                        to the control plane component.
                      items:
                        description: HostPathMount contains elements describing volumes
                          that are mounted from the host.
                        properties:
                          hostPath:
                            description: HostPath is the path in the host that will
                              be mounted inside the pod.
                            type: string
                          mountPath:
                            description: MountPath is the path inside the pod where
                              hostPath will be mounted.
                            type: string
                          name:
                            description: Name of the volume inside the pod template.
                            type: string
                          pathType:
                            description: PathType is the type of the HostPath.
                            type: string
                          readOnly:
                            description: ReadOnly controls write access to the volume
                            type: boolean
                        required:
                        - hostPath
                        - mountPath
                        - name
                        type: object
                      type: array
                    timeoutForControlPlane:
                      description: TimeoutForControlPlane controls the timeout that
                        we use for API server to appear
                      type: string
                  type: object
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                    of an object. Servers should convert recognized schemas to the
                    latest internal value, and may reject unrecognized values. More
                    info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
                  type: string
                certificatesDir:
                  description: CertificatesDir specifies where to store or look for
                    all required certificates.
                  type: string
                clusterName:
                  description: The cluster name
                  type: string
                controlPlaneEndpoint:
                  description: 'ControlPlaneEndpoint sets a stable IP address or DNS
                    name for the control plane; it can be a valid IP address or a
                    RFC-1123 DNS subdomain, both with optional TCP port. In case the
                    ControlPlaneEndpoint is not specified, the AdvertiseAddress +
                    BindPort are used; in case the ControlPlaneEndpoint is specified
                    but without a TCP port, the BindPort is used. Possible usages
                    are: e.g. In a cluster with more than one control plane instances,
                    this field should be assigned the address of the external load
                    balancer in front of the control plane instances. e.g.  in environments
                    with enforced node recycling, the ControlPlaneEndpoint could be
                    used for assigning a stable DNS to the control plane. NB: This
                    value defaults to the first value in the Cluster object status.apiEndpoints
                    array.'
                  type: string
                controllerManager:
                  description: ControllerManager contains extra settings for the controller
                    manager control plane component
                  properties:
                    extraArgs:
                      additionalProperties:
                        type: string
                      description: 'ExtraArgs is an extra set of flags to pass to
                        the control plane component. TODO: This is temporary and ideally
                        we would like to switch all components to use ComponentConfig
                        + ConfigMaps.'
                      type: object
                    extraVolumes:
                      description: ExtraVolumes is an extra set of host volumes, mounted
                        to the control plane component.
                      items:
                        description: HostPathMount contains elements describing volumes
                          that are mounted from the host.
                        properties:
                          hostPath:
                            description: HostPath is the path in the host that will
                              be mounted inside the pod.
                            type: string
                          mountPath:
                            description: MountPath is the path inside the pod where
                              hostPath will be mounted.
                            type: string
                          name:
                            description: Name of the volume inside the pod template.
                            type: string
                          pathType:
                            description: PathType is the type of the HostPath.
                            type: string
                          readOnly:
                            description: ReadOnly controls write access to the volume
                            type: boolean
                        required:
                        - hostPath
                        - mountPath
                        - name
                        type: object
                      type: array
                  type: object
                dns:
                  description: DNS defines the options for the DNS add-on installed
                    in the cluster.
                  properties:
                    imageRepository:
                      description: ImageRepository sets the container registry to
                        pull images from. if not set, the ImageRepository defined
                        in ClusterConfiguration will be used instead.
                      type: string
                    imageTag:
                      description: ImageTag allows to specify a tag for the image.
                        In case this value is set, kubeadm does not change automatically
                        the version of the above components during upgrades.
                      type: string
                    type:
                      description: Type defines the DNS add-on to be used
                      type: string
                  required:
                  - type
                  type: object
                etcd:
                  description: Etcd holds configuration for etcd.
                  properties:
                    external:
                      description: External describes how to connect to an external
                        etcd cluster Local and External are mutually exclusive
                      properties:
                        caFile:
                          description: CAFile is an SSL Certificate Authority file
                            used to secure etcd communication. Required if using a
                            TLS connection.
                          type: string
                        certFile:
                          description: CertFile is an SSL certification file used
                            to secure etcd communication. Required if using a TLS
                            connection.
                          type: string
                        endpoints:
                          description: Endpoints of etcd members. Required for ExternalEtcd.
                          items:
                            type: string
                          type: array
                        keyFile:
                          description: KeyFile is an SSL key file used to secure etcd
                            communication. Required if using a TLS connection.
                          type: string
                      required:
                      - caFile
                      - certFile
                      - endpoints
                      - keyFile
                      type: object
                    local:
                      description: Local provides configuration knobs for configuring
                        the local etcd instance Local and External are mutually exclusive
                      properties:
                        dataDir:
                          description: DataDir is the directory etcd will place its
                            data. Defaults to "/var/lib/etcd".
                          type: string
                        extraArgs:
                          additionalProperties:
                            type: string
                          description: ExtraArgs are extra arguments provided to the
                            etcd binary when run inside a static pod.
                          type: object
                        imageRepository:
                          description: ImageRepository sets the container registry
                            to pull images from. if not set, the ImageRepository defined
                            in ClusterConfiguration will be used instead.
                          type: string
                        imageTag:
                          description: ImageTag allows to specify a tag for the image.
                            In case this value is set, kubeadm does not change automatically
                            the version of the above components during upgrades.
                          type: string
                        peerCertSANs:
                          description: PeerCertSANs sets extra Subject Alternative
                            Names for the etcd peer signing cert.
                          items:
                            type: string
                          type: array
                        serverCertSANs:
                          description: ServerCertSANs sets extra Subject Alternative
                            Names for the etcd server signing cert.
                          items:
                            type: string
                          type: array
                      required:
                      - dataDir
                      type: object
                  type: object
                featureGates:
                  additionalProperties:
                    type: boolean
                  description: FeatureGates enabled by the user.
                  type: object
                imageRepository:
                  description: ImageRepository sets the container registry to pull
                    images from. If empty, `k8s.gcr.io` will be used by default; in
                    case of kubernetes version is a CI build (kubernetes version starts
                    with `ci/` or `ci-cross/`) `gcr.io/kubernetes-ci-images` will
                    be used as a default for control plane components and for kube-proxy,
                    while `k8s.gcr.io` will be used for all the other images.
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource
                    this object represents. Servers may infer this from the endpoint
                    the client submits requests to. Cannot be updated. In CamelCase.
                    More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                  type: string
                kubernetesVersion:
                  description: 'KubernetesVersion is the target version of the control
                    plane. NB: This value defaults to the Machine object spec.kuberentesVersion'
                  type: string
                networking:
                  description: 'Networking holds configuration for the networking
                    topology of the cluster. NB: This value defaults to the Cluster
                    object spec.clusterNetwork.'
                  properties:
                    dnsDomain:
                      description: DNSDomain is the dns domain used by k8s services.
                        Defaults to "cluster.local".
                      type: string
                    podSubnet:
                      description: PodSubnet is the subnet used by pods.
                      type: string
                    serviceSubnet:
                      description: ServiceSubnet is the subnet used by k8s services.
                        Defaults to "10.96.0.0/12".
                      type: string
                  required:
                  - dnsDomain
                  - podSubnet
                  - serviceSubnet
                  type: object
                scheduler:
                  description: Scheduler contains extra settings for the scheduler
                    control plane component
                  properties:
                    extraArgs:
                      additionalProperties:
                        type: string
                      description: 'ExtraArgs is an extra set of flags to pass to
                        the control plane component. TODO: This is temporary and ideally
                        we would like to switch all components to use ComponentConfig
                        + ConfigMaps.'
                      type: object
                    extraVolumes:
                      description: ExtraVolumes is an extra set of host volumes, mounted
                        to the control plane component.
                      items:
                        description: HostPathMount contains elements describing volumes
                          that are mounted from the host.
                        properties:
                          hostPath:
                            description: HostPath is the path in the host that will
                              be mounted inside the pod.
                            type: string
                          mountPath:
                            description: MountPath is the path inside the pod where
                              hostPath will be mounted.
                            type: string
                          name:
                            description: Name of the volume inside the pod template.
                            type: string
                          pathType:
                            description: PathType is the type of the HostPath.
                            type: string
                          readOnly:
                            description: ReadOnly controls write access to the volume
                            type: boolean
                        required:
                        - hostPath
                        - mountPath
                        - name
                        type: object
                      type: array
                  type: object
                useHyperKubeImage:
                  description: UseHyperKubeImage controls if hyperkube should be used
                    for Kubernetes components instead of their respective separate
                    images
                  type: boolean
              type: object
            files:
              description: Files specifies extra files to be passed to user_data upon
                creation.
              items:
                description: File defines the input for generating write_files in
                  cloud-init.
                properties:
                  content:
                    description: Content is the actual content of the file.
                    type: string
                  encoding:
                    description: Encoding specifies the encoding of the file contents.
                    enum:
                    - base64
                    - gzip
                    - gzip+base64
                    type: string
                  owner:
                    description: Owner specifies the ownership of the file, e.g. "root:root".
                    type: string
                  path:
                    description: Path specifies the full path on disk where to store
                      the file.
                    type: string
                  permissions:
                    description: Permissions specifies the permissions to assign to
                      the file, e.g. "0640".
                    type: string
                required:
                - content
                - path
                type: object
              type: array
            format:
              description: Format specifies the output format of the bootstrap data
              enum:
              - cloud-config
              type: string
            initConfiguration:
              description: InitConfiguration along with ClusterConfiguration are the
                configurations necessary for the init command
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                    of an object. Servers should convert recognized schemas to the
                    latest internal value, and may reject unrecognized values. More
                    info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
                  type: string
                bootstrapTokens:
                  description: BootstrapTokens is respected at `kubeadm init` time
                    and describes a set of Bootstrap Tokens to create. This information
                    IS NOT uploaded to the kubeadm cluster configmap, partly because
                    of its sensitive nature
                  items:
                    description: BootstrapToken describes one bootstrap token, stored
                      as a Secret in the cluster
                    properties:
                      description:
                        description: Description sets a human-friendly message why
                          this token exists and what it's used for, so other administrators
                          can know its purpose.
                        type: string
                      expires:
                        description: Expires specifies the timestamp when this token
                          expires. Defaults to being set dynamically at runtime based
                          on the TTL. Expires and TTL are mutually exclusive.
                        format: date-time
                        type: string
                      groups:
                        description: Groups specifies the extra groups that this token
                          will authenticate as when/if used for authentication
                        items:
                          type: string
                        type: array
                      token:
                        description: Token is used for establishing bidirectional
                          trust between nodes and control-planes. Used for joining
                          nodes in the cluster.
                        type: object
                      ttl:
                        description: TTL defines the time to live for this token.
                          Defaults to 24h. Expires and TTL are mutually exclusive.
                        type: string
                      usages:
                        description: Usages describes the ways in which this token
                          can be used. Can by default be used for establishing bidirectional
                          trust, but that can be changed here.
                        items:
                          type: string
                        type: array
                    required:
                    - token
                    type: object
                  type: array
                kind:
                  description: 'Kind is a string value representing the REST resource
                    this object represents. Servers may infer this from the endpoint
                    the client submits requests to. Cannot be updated. In CamelCase.
                    More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                  type: string
                localAPIEndpoint:
                  description: LocalAPIEndpoint represents the endpoint of the API
                    server instance that's deployed on this control plane node In
                    HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                    in the sense that ControlPlaneEndpoint is the global endpoint
                    for the cluster, which then loadbalances the requests to each
                    individual API server. This configuration object lets you customize
                    what IP/DNS name and port the local API server advertises it's
                    accessible on. By default, kubeadm tries to auto-detect the IP
                    of the default interface and use that, but in case that process
                    fails you may set the desired value here.
                  properties:
                    advertiseAddress:
                      description: AdvertiseAddress sets the IP address for the API
                        server to advertise.
                      type: string
                    bindPort:
                      description: BindPort sets the secure port for the API Server
                        to bind to. Defaults to 6443.
                      format: int32
                      type: integer
                  required:
                  - advertiseAddress
                  - bindPort
                  type: object
                nodeRegistration:
                  description: NodeRegistration holds fields that relate to registering
                    the new control-plane node to the cluster
                  properties:
                    criSocket:
                      description: CRISocket is used to retrieve container runtime
                        info. This information will be annotated to the Node API object,
                        for later re-use
                      type: string
                    kubeletExtraArgs:
                      additionalProperties:
                        type: string
                      description: KubeletExtraArgs passes through extra arguments
                        to the kubelet. The arguments here are passed to the kubelet
                        command line via the environment file kubeadm writes at runtime
                        for the kubelet to source. This overrides the generic base-level
                        configuration in the kubelet-config-1.X ConfigMap Flags have
                        higher priority when parsing. These values are local and specific
                        to the node kubeadm is executing on.
                      type: object
                    name:
                      description: Name is the `.Metadata.Name` field of the Node
                        API object that will be created in this `kubeadm init` or
                        `kubeadm join` operation. This field is also used in the CommonName
                        field of the kubelet's client certificate to the API server.
                        Defaults to the hostname of the node if not provided.
                      type: string
                    taints:
                      description: 'Taints specifies the taints the Node API object
                        should be registered with. If this field is unset, i.e. nil,
                        in the `kubeadm init` process it will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                        If you don''t want to taint your control-plane node, set this
                        field to an empty slice, i.e. `taints: {}` in the YAML file.
                        This field is solely used for Node registration.'
                      items:
                        description: The node this Taint is attached to has the "effect"
                          on any pod that does not tolerate the Taint.
                        properties:
                          effect:
                            description: Required. The effect of the taint on pods
                              that do not tolerate the taint. Valid effects are NoSchedule,
                              PreferNoSchedule and NoExecute.
                            type: string
                          key:
                            description: Required. The taint key to be applied to
                              a node.
                            type: string
                          timeAdded:
                            description: TimeAdded represents the time at which the
                              taint was added. It is only written for NoExecute taints.
                            format: date-time
                            type: string
                          value:
                            description: Required. The taint value corresponding to
                              the taint key.
                            type: string
                        required:
                        - effect
                        - key
                        type: object
                      type: array
                  type: object
              type: object
            joinConfiguration:
              description: JoinConfiguration is the kubeadm configuration for the
                join command
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                    of an object. Servers should convert recognized schemas to the
                    latest internal value, and may reject unrecognized values. More
                    info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
                  type: string
                caCertPath:
                  description: 'CACertPath is the path to the SSL certificate authority
                    used to secure comunications between node and control-plane. Defaults
                    to "/etc/kubernetes/pki/ca.crt". TODO: revisit when there is defaulting
                    from k/k'
                  type: string
                controlPlane:
                  description: ControlPlane defines the additional control plane instance
                    to be deployed on the joining node. If nil, no additional control
                    plane instance will be deployed.
                  properties:
                    localAPIEndpoint:
                      description: LocalAPIEndpoint represents the endpoint of the
                        API server instance to be deployed on this node.
                      properties:
                        advertiseAddress:
                          description: AdvertiseAddress sets the IP address for the
                            API server to advertise.
                          type: string
                        bindPort:
                          description: BindPort sets the secure port for the API Server
                            to bind to. Defaults to 6443.
                          format: int32
                          type: integer
                      required:
                      - advertiseAddress
                      - bindPort
                      type: object
                  type: object
                discovery:
                  description: 'Discovery specifies the options for the kubelet to
                    use during the TLS Bootstrap process TODO: revisit when there
                    is defaulting from k/k'
                  properties:
                    bootstrapToken:
                      description: BootstrapToken is used to set the options for bootstrap
                        token based discovery BootstrapToken and File are mutually
                        exclusive
                      properties:
                        apiServerEndpoint:
                          description: APIServerEndpoint is an IP or domain name to
                            the API server from which info will be fetched.
                          type: string
                        caCertHashes:
                          description: 'CACertHashes specifies a set of public key
                            pins to verify when token-based discovery is used. The
                            root CA found during discovery must match one of these
                            values. Specifying an empty set disables root CA pinning,
                            which can be unsafe. Each hash is specified as "<type>:<value>",
                            where the only currently supported type is "sha256". This
                            is a hex-encoded SHA-256 hash of the Subject Public Key
                            Info (SPKI) object in DER-encoded ASN.1. These hashes
                            can be calculated using, for example, OpenSSL: openssl
                            x509 -pubkey -in ca.crt openssl rsa -pubin -outform der
                            2>&/dev/null | openssl dgst -sha256 -hex'
                          items:
                            type: string
                          type: array
                        token:
                          description: Token is a token used to validate cluster information
                            fetched from the control-plane.
                          type: string
                        unsafeSkipCAVerification:
                          description: UnsafeSkipCAVerification allows token-based
                            discovery without CA verification via CACertHashes. This
                            can weaken the security of kubeadm since other nodes can
                            impersonate the control-plane.
                          type: boolean
                      required:
                      - token
                      - unsafeSkipCAVerification
                      type: object
                    file:
                      description: File is used to specify a file or URL to a kubeconfig
                        file from which to load cluster information BootstrapToken
                        and File are mutually exclusive
                      properties:
                        kubeConfigPath:
                          description: KubeConfigPath is used to specify the actual
                            file path or URL to the kubeconfig file from which to
                            load cluster information
                          type: string
                      required:
                      - kubeConfigPath
                      type: object
                    timeout:
                      description: Timeout modifies the discovery timeout
                      type: string
                    tlsBootstrapToken:
                      description: 'TLSBootstrapToken is a token used for TLS bootstrapping.
                        If .BootstrapToken is set, this field is defaulted to .BootstrapToken.Token,
                        but can be overridden. If .File is set, this field **must
                        be set** in case the KubeConfigFile does not contain any other
                        authentication information TODO: revisit when there is defaulting
                        from k/k'
                      type: string
                  type: object
                kind:
                  description: 'Kind is a string value representing the REST resource
                    this object represents. Servers may infer this from the endpoint
                    the client submits requests to. Cannot be updated. In CamelCase.
                    More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                  type: string
                nodeRegistration:
                  description: NodeRegistration holds fields that relate to registering
                    the new control-plane node to the cluster
                  properties:
                    criSocket:
                      description: CRISocket is used to retrieve container runtime
                        info. This information will be annotated to the Node API object,
                        for later re-use
                      type: string
                    kubeletExtraArgs:
                      additionalProperties:
                        type: string
                      description: KubeletExtraArgs passes through extra arguments
                        to the kubelet. The arguments here are passed to the kubelet
                        command line via the environment file kubeadm writes at runtime
                        for the kubelet to source. This overrides the generic base-level
                        configuration in the kubelet-config-1.X ConfigMap Flags have
                        higher priority when parsing. These values are local and specific
                        to the node kubeadm is executing on.
                      type: object
                    name:
                      description: Name is the `.Metadata.Name` field of the Node
                        API object that will be created in this `kubeadm init` or
                        `kubeadm join` operation. This field is also used in the CommonName
                        field of the kubelet's client certificate to the API server.
                        Defaults to the hostname of the node if not provided.
                      type: string
                    taints:
                      description: 'Taints specifies the taints the Node API object
                        should be registered with. If this field is unset, i.e. nil,
                        in the `kubeadm init` process it will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                        If you don''t want to taint your control-plane node, set this
                        field to an empty slice, i.e. `taints: {}` in the YAML file.
                        This field is solely used for Node registration.'
                      items:
                        description: The node this Taint is attached to has the "effect"
                          on any pod that does not tolerate the Taint.
                        properties:
                          effect:
                            description: Required. The effect of the taint on pods
                              that do not tolerate the taint. Valid effects are NoSchedule,
                              PreferNoSchedule and NoExecute.
                            type: string
                          key:
                            description: Required. The taint key to be applied to
                              a node.
                            type: string
                          timeAdded:
                            description: TimeAdded represents the time at which the
                              taint was added. It is only written for NoExecute taints.
                            format: date-time
                            type: string
                          value:
                            description: Required. The taint value corresponding to
                              the taint key.
                            type: string
                        required:
                        - effect
                        - key
                        type: object
                      type: array
                  type: object
              required:
              - nodeRegistration
              type: object
            ntp:
              description: NTP specifies NTP configuration
              properties:
                enabled:
                  description: Enabled specifies whether NTP should be enabled
                  type: boolean
                servers:
                  description: Servers specifies which NTP servers to use
                  items:
                    type: string
                  type: array
              type: object
            postKubeadmCommands:
              description: PostKubeadmCommands specifies extra commands to run after
                kubeadm runs
              items:
                type: string
              type: array
            preKubeadmCommands:
              description: PreKubeadmCommands specifies extra commands to run before
                kubeadm runs
              items:
                type: string
              type: array
            users:
              description: Users specifies extra users to add
              items:
                description: User defines the input for a generated user in cloud-init.
                properties:
                  gecos:
                    description: Gecos specifies the gecos to use for the user
                    type: string
                  groups:
                    description: Groups specifies the additional groups for the user
                    type: string
                  homeDir:
                    description: HomeDir specifies the home directory to use for the
                      user
                    type: string
                  inactive:
                    description: Inactive specifies whether to mark the user as inactive
                    type: boolean
                  lockPassword:
                    description: LockPassword specifies if password login should be
                      disabled
                    type: boolean
                  name:
                    description: Name specifies the user name
                    type: string
                  passwd:
                    description: Passwd specifies a hashed password for the user
                    type: string
                  primaryGroup:
                    description: PrimaryGroup specifies the primary group for the
                      user
                    type: string
                  shell:
                    description: Shell specifies the user's shell
                    type: string
                  sshAuthorizedKeys:
                    description: SSHAuthorizedKeys specifies a list of ssh authorized
                      keys for the user
                    items:
                      type: string
                    type: array
                  sudo:
                    description: Sudo specifies a sudo role for the user
                    type: string
                required:
                - name
                type: object
              type: array
          type: object
        status:
          description: KubeadmConfigStatus defines the observed state of KubeadmConfig
          properties:
            bootstrapData:
              description: BootstrapData will be a cloud-init script for now
              format: byte
              type: string
            errorMessage:
              description: ErrorMessage will be set on non-retryable errors
              type: string
            errorReason:
              description: ErrorReason will be set on non-retryable errors
              type: string
            ready:
              description: Ready indicates the BootstrapData field is ready to be
                consumed
              type: boolean
          type: object
      type: object
  version: v1alpha2
  versions:
  - name: v1alpha2
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: kubeadmconfigtemplates.bootstrap.cluster.x-k8s.io
spec:
  group: bootstrap.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: KubeadmConfigTemplate
    listKind: KubeadmConfigTemplateList
    plural: kubeadmconfigtemplates
    singular: kubeadmconfigtemplate
  scope: Namespaced
  validation:
    openAPIV3Schema:
      description: KubeadmConfigTemplate is the Schema for the kubeadmconfigtemplates
        API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: KubeadmConfigTemplateSpec defines the desired state of KubeadmConfigTemplate
          properties:
            template:
              description: KubeadmConfigTemplateResource defines the Template structure
              properties:
                spec:
                  description: KubeadmConfigSpec defines the desired state of KubeadmConfig.
                    Either ClusterConfiguration and InitConfiguration should be defined
                    or the JoinConfiguration should be defined.
                  properties:
                    clusterConfiguration:
                      description: ClusterConfiguration along with InitConfiguration
                        are the configurations necessary for the init command
                      properties:
                        apiServer:
                          description: APIServer contains extra settings for the API
                            server control plane component
                          properties:
                            certSANs:
                              description: CertSANs sets extra Subject Alternative
                                Names for the API Server signing cert.
                              items:
                                type: string
                              type: array
                            extraArgs:
                              additionalProperties:
                                type: string
                              description: 'ExtraArgs is an extra set of flags to
                                pass to the control plane component. TODO: This is
                                temporary and ideally we would like to switch all
                                components to use ComponentConfig + ConfigMaps.'
                              type: object
                            extraVolumes:
                              description: ExtraVolumes is an extra set of host volumes,
                                mounted to the control plane component.
                              items:
                                description: HostPathMount contains elements describing
                                  volumes that are mounted from the host.
                                properties:
                                  hostPath:
                                    description: HostPath is the path in the host
                                      that will be mounted inside the pod.
                                    type: string
                                  mountPath:
                                    description: MountPath is the path inside the
                                      pod where hostPath will be mounted.
                                    type: string
                                  name:
                                    description: Name of the volume inside the pod
                                      template.
                                    type: string
                                  pathType:
                                    description: PathType is the type of the HostPath.
                                    type: string
                                  readOnly:
                                    description: ReadOnly controls write access to
                                      the volume
                                    type: boolean
                                required:
                                - hostPath
                                - mountPath
                                - name
                                type: object
                              type: array
                            timeoutForControlPlane:
                              description: TimeoutForControlPlane controls the timeout
                                that we use for API server to appear
                              type: string
                          type: object
                        apiVersion:
                          description: 'APIVersion defines the versioned schema of
                            this representation of an object. Servers should convert
                            recognized schemas to the latest internal value, and may
                            reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
                          type: string
                        certificatesDir:
                          description: CertificatesDir specifies where to store or
                            look for all required certificates.
                          type: string
                        clusterName:
                          description: The cluster name
                          type: string
                        controlPlaneEndpoint:
                          description: 'ControlPlaneEndpoint sets a stable IP address
                            or DNS name for the control plane; it can be a valid IP
                            address or a RFC-1123 DNS subdomain, both with optional
                            TCP port. In case the ControlPlaneEndpoint is not specified,
                            the AdvertiseAddress + BindPort are used; in case the
                            ControlPlaneEndpoint is specified but without a TCP port,
                            the BindPort is used. Possible usages are: e.g. In a cluster
                            with more than one control plane instances, this field
                            should be assigned the address of the external load balancer
                            in front of the control plane instances. e.g.  in environments
                            with enforced node recycling, the ControlPlaneEndpoint
                            could be used for assigning a stable DNS to the control
                            plane. NB: This value defaults to the first value in the
                            Cluster object status.apiEndpoints array.'
                          type: string
                        controllerManager:
                          description: ControllerManager contains extra settings for
                            the controller manager control plane component
                          properties:
                            extraArgs:
                              additionalProperties:
                                type: string
                              description: 'ExtraArgs is an extra set of flags to
                                pass to the control plane component. TODO: This is
                                temporary and ideally we would like to switch all
                                components to use ComponentConfig + ConfigMaps.'
                              type: object
                            extraVolumes:
                              description: ExtraVolumes is an extra set of host volumes,
                                mounted to the control plane component.
                              items:
                                description: HostPathMount contains elements describing
                                  volumes that are mounted from the host.
                                properties:
                                  hostPath:
                                    description: HostPath is the path in the host
                                      that will be mounted inside the pod.
                                    type: string
                                  mountPath:
                                    description: MountPath is the path inside the
                                      pod where hostPath will be mounted.
                                    type: string
                                  name:
                                    description: Name of the volume inside the pod
                                      template.
                                    type: string
                                  pathType:
                                    description: PathType is the type of the HostPath.
                                    type: string
                                  readOnly:
                                    description: ReadOnly controls write access to
                                      the volume
                                    type: boolean
                                required:
                                - hostPath
                                - mountPath
                                - name
                                type: object
                              type: array
                          type: object
                        dns:
                          description: DNS defines the options for the DNS add-on
                            installed in the cluster.
                          properties:
                            imageRepository:
                              description: ImageRepository sets the container registry
                                to pull images from. if not set, the ImageRepository
                                defined in ClusterConfiguration will be used instead.
                              type: string
                            imageTag:
                              description: ImageTag allows to specify a tag for the
                                image. In case this value is set, kubeadm does not
                                change automatically the version of the above components
                                during upgrades.
                              type: string
                            type:
                              description: Type defines the DNS add-on to be used
                              type: string
                          required:
                          - type
                          type: object
                        etcd:
                          description: Etcd holds configuration for etcd.
                          properties:
                            external:
                              description: External describes how to connect to an
                                external etcd cluster Local and External are mutually
                                exclusive
                              properties:
                                caFile:
                                  description: CAFile is an SSL Certificate Authority
                                    file used to secure etcd communication. Required
                                    if using a TLS connection.
                                  type: string
                                certFile:
                                  description: CertFile is an SSL certification file
                                    used to secure etcd communication. Required if
                                    using a TLS connection.
                                  type: string
                                endpoints:
                                  description: Endpoints of etcd members. Required
                                    for ExternalEtcd.
                                  items:
                                    type: string
                                  type: array
                                keyFile:
                                  description: KeyFile is an SSL key file used to
                                    secure etcd communication. Required if using a
                                    TLS connection.
                                  type: string
                              required:
                              - caFile
                              - certFile
                              - endpoints
                              - keyFile
                              type: object
                            local:
                              description: Local provides configuration knobs for
                                configuring the local etcd instance Local and External
                                are mutually exclusive
                              properties:
                                dataDir:
                                  description: DataDir is the directory etcd will
                                    place its data. Defaults to "/var/lib/etcd".
                                  type: string
                                extraArgs:
                                  additionalProperties:
                                    type: string
                                  description: ExtraArgs are extra arguments provided
                                    to the etcd binary when run inside a static pod.
                                  type: object
                                imageRepository:
                                  description: ImageRepository sets the container
                                    registry to pull images from. if not set, the
                                    ImageRepository defined in ClusterConfiguration
                                    will be used instead.
                                  type: string
                                imageTag:
                                  description: ImageTag allows to specify a tag for
                                    the image. In case this value is set, kubeadm
                                    does not change automatically the version of the
                                    above components during upgrades.
                                  type: string
                                peerCertSANs:
                                  description: PeerCertSANs sets extra Subject Alternative
                                    Names for the etcd peer signing cert.
                                  items:
                                    type: string
                                  type: array
                                serverCertSANs:
                                  description: ServerCertSANs sets extra Subject Alternative
                                    Names for the etcd server signing cert.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - dataDir
                              type: object
                          type: object
                        featureGates:
                          additionalProperties:
                            type: boolean
                          description: FeatureGates enabled by the user.
                          type: object
                        imageRepository:
                          description: ImageRepository sets the container registry
                            to pull images from. If empty, `k8s.gcr.io` will be used
                            by default; in case of kubernetes version is a CI build
                            (kubernetes version starts with `ci/` or `ci-cross/`)
                            `gcr.io/kubernetes-ci-images` will be used as a default
                            for control plane components and for kube-proxy, while
                            `k8s.gcr.io` will be used for all the other images.
                          type: string
                        kind:
                          description: 'Kind is a string value representing the REST
                            resource this object represents. Servers may infer this
                            from the endpoint the client submits requests to. Cannot
                            be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                          type: string
                        kubernetesVersion:
                          description: 'KubernetesVersion is the target version of
                            the control plane. NB: This value defaults to the Machine
                            object spec.kuberentesVersion'
                          type: string
                        networking:
                          description: 'Networking holds configuration for the networking
                            topology of the cluster. NB: This value defaults to the
                            Cluster object spec.clusterNetwork.'
                          properties:
                            dnsDomain:
                              description: DNSDomain is the dns domain used by k8s
                                services. Defaults to "cluster.local".
                              type: string
                            podSubnet:
                              description: PodSubnet is the subnet used by pods.
                              type: string
                            serviceSubnet:
                              description: ServiceSubnet is the subnet used by k8s
                                services. Defaults to "10.96.0.0/12".
                              type: string
                          required:
                          - dnsDomain
                          - podSubnet
                          - serviceSubnet
                          type: object
                        scheduler:
                          description: Scheduler contains extra settings for the scheduler
                            control plane component
                          properties:
                            extraArgs:
                              additionalProperties:
                                type: string
                              description: 'ExtraArgs is an extra set of flags to
                                pass to the control plane component. TODO: This is
                                temporary and ideally we would like to switch all
                                components to use ComponentConfig + ConfigMaps.'
                              type: object
                            extraVolumes:
                              description: ExtraVolumes is an extra set of host volumes,
                                mounted to the control plane component.
                              items:
                                description: HostPathMount contains elements describing
                                  volumes that are mounted from the host.
                                properties:
                                  hostPath:
                                    description: HostPath is the path in the host
                                      that will be mounted inside the pod.
                                    type: string
                                  mountPath:
                                    description: MountPath is the path inside the
                                      pod where hostPath will be mounted.
                                    type: string
                                  name:
                                    description: Name of the volume inside the pod
                                      template.
                                    type: string
                                  pathType:
                                    description: PathType is the type of the HostPath.
                                    type: string
                                  readOnly:
                                    description: ReadOnly controls write access to
                                      the volume
                                    type: boolean
                                required:
                                - hostPath
                                - mountPath
                                - name
                                type: object
                              type: array
                          type: object
                        useHyperKubeImage:
                          description: UseHyperKubeImage controls if hyperkube should
                            be used for Kubernetes components instead of their respective
                            separate images
                          type: boolean
                      type: object
                    files:
                      description: Files specifies extra files to be passed to user_data
                        upon creation.
                      items:
                        description: File defines the input for generating write_files
                          in cloud-init.
                        properties:
                          content:
                            description: Content is the actual content of the file.
                            type: string
                          encoding:
                            description: Encoding specifies the encoding of the file
                              contents.
                            enum:
                            - base64
                            - gzip
                            - gzip+base64
                            type: string
                          owner:
                            description: Owner specifies the ownership of the file,
                              e.g. "root:root".
                            type: string
                          path:
                            description: Path specifies the full path on disk where
                              to store the file.
                            type: string
                          permissions:
                            description: Permissions specifies the permissions to
                              assign to the file, e.g. "0640".
                            type: string
                        required:
                        - content
                        - path
                        type: object
                      type: array
                    format:
                      description: Format specifies the output format of the bootstrap
                        data
                      enum:
                      - cloud-config
                      type: string
                    initConfiguration:
                      description: InitConfiguration along with ClusterConfiguration
                        are the configurations necessary for the init command
                      properties:
                        apiVersion:
                          description: 'APIVersion defines the versioned schema of
                            this representation of an object. Servers should convert
                            recognized schemas to the latest internal value, and may
                            reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
                          type: string
                        bootstrapTokens:
                          description: BootstrapTokens is respected at `kubeadm init`
                            time and describes a set of Bootstrap Tokens to create.
                            This information IS NOT uploaded to the kubeadm cluster
                            configmap, partly because of its sensitive nature
                          items:
                            description: BootstrapToken describes one bootstrap token,
                              stored as a Secret in the cluster
                            properties:
                              description:
                                description: Description sets a human-friendly message
                                  why this token exists and what it's used for, so
                                  other administrators can know its purpose.
                                type: string
                              expires:
                                description: Expires specifies the timestamp when
                                  this token expires. Defaults to being set dynamically
                                  at runtime based on the TTL. Expires and TTL are
                                  mutually exclusive.
                                format: date-time
                                type: string
                              groups:
                                description: Groups specifies the extra groups that
                                  this token will authenticate as when/if used for
                                  authentication
                                items:
                                  type: string
                                type: array
                              token:
                                description: Token is used for establishing bidirectional
                                  trust between nodes and control-planes. Used for
                                  joining nodes in the cluster.
                                type: object
                              ttl:
                                description: TTL defines the time to live for this
                                  token. Defaults to 24h. Expires and TTL are mutually
                                  exclusive.
                                type: string
                              usages:
                                description: Usages describes the ways in which this
                                  token can be used. Can by default be used for establishing
                                  bidirectional trust, but that can be changed here.
                                items:
                                  type: string
                                type: array
                            required:
                            - token
                            type: object
                          type: array
                        kind:
                          description: 'Kind is a string value representing the REST
                            resource this object represents. Servers may infer this
                            from the endpoint the client submits requests to. Cannot
                            be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                          type: string
                        localAPIEndpoint:
                          description: LocalAPIEndpoint represents the endpoint of
                            the API server instance that's deployed on this control
                            plane node In HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                            in the sense that ControlPlaneEndpoint is the global endpoint
                            for the cluster, which then loadbalances the requests
                            to each individual API server. This configuration object
                            lets you customize what IP/DNS name and port the local
                            API server advertises it's accessible on. By default,
                            kubeadm tries to auto-detect the IP of the default interface
                            and use that, but in case that process fails you may set
                            the desired value here.
                          properties:
                            advertiseAddress:
                              description: AdvertiseAddress sets the IP address for
                                the API server to advertise.
                              type: string
                            bindPort:
                              description: BindPort sets the secure port for the API
                                Server to bind to. Defaults to 6443.
                              format: int32
                              type: integer
                          required:
                          - advertiseAddress
                          - bindPort
                          type: object
                        nodeRegistration:
                          description: NodeRegistration holds fields that relate to
                            registering the new control-plane node to the cluster
                          properties:
                            criSocket:
                              description: CRISocket is used to retrieve container
                                runtime info. This information will be annotated to
                                the Node API object, for later re-use
                              type: string
                            kubeletExtraArgs:
                              additionalProperties:
                                type: string
                              description: KubeletExtraArgs passes through extra arguments
                                to the kubelet. The arguments here are passed to the
                                kubelet command line via the environment file kubeadm
                                writes at runtime for the kubelet to source. This
                                overrides the generic base-level configuration in
                                the kubelet-config-1.X ConfigMap Flags have higher
                                priority when parsing. These values are local and
                                specific to the node kubeadm is executing on.
                              type: object
                            name:
                              description: Name is the `.Metadata.Name` field of the
                                Node API object that will be created in this `kubeadm
                                init` or `kubeadm join` operation. This field is also
                                used in the CommonName field of the kubelet's client
                                certificate to the API server. Defaults to the hostname
                                of the node if not provided.
                              type: string
                            taints:
                              description: 'Taints specifies the taints the Node API
                                object should be registered with. If this field is
                                unset, i.e. nil, in the `kubeadm init` process it
                                will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                                If you don''t want to taint your control-plane node,
                                set this field to an empty slice, i.e. `taints: {}`
                                in the YAML file. This field is solely used for Node
                                registration.'
                              items:
                                description: The node this Taint is attached to has
                                  the "effect" on any pod that does not tolerate the
                                  Taint.
                                properties:
                                  effect:
                                    description: Required. The effect of the taint
                                      on pods that do not tolerate the taint. Valid
                                      effects are NoSchedule, PreferNoSchedule and
                                      NoExecute.
                                    type: string
                                  key:
                                    description: Required. The taint key to be applied
                                      to a node.
                                    type: string
                                  timeAdded:
                                    description: TimeAdded represents the time at
                                      which the taint was added. It is only written
                                      for NoExecute taints.
                                    format: date-time
                                    type: string
                                  value:
                                    description: Required. The taint value corresponding
                                      to the taint key.
                                    type: string
                                required:
                                - effect
                                - key
                                type: object
                              type: array
                          type: object
                      type: object
                    joinConfiguration:
                      description: JoinConfiguration is the kubeadm configuration
                        for the join command
                      properties:
                        apiVersion:
                          description: 'APIVersion defines the versioned schema of
                            this representation of an object. Servers should convert
                            recognized schemas to the latest internal value, and may
                            reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
                          type: string
                        caCertPath:
                          description: 'CACertPath is the path to the SSL certificate
                            authority used to secure comunications between node and
                            control-plane. Defaults to "/etc/kubernetes/pki/ca.crt".
                            TODO: revisit when there is defaulting from k/k'
                          type: string
                        controlPlane:
                          description: ControlPlane defines the additional control
                            plane instance to be deployed on the joining node. If
                            nil, no additional control plane instance will be deployed.
                          properties:
                            localAPIEndpoint:
                              description: LocalAPIEndpoint represents the endpoint
                                of the API server instance to be deployed on this
                                node.
                              properties:
                                advertiseAddress:
                                  description: AdvertiseAddress sets the IP address
                                    for the API server to advertise.
                                  type: string
                                bindPort:
                                  description: BindPort sets the secure port for the
                                    API Server to bind to. Defaults to 6443.
                                  format: int32
                                  type: integer
                              required:
                              - advertiseAddress
                              - bindPort
                              type: object
                          type: object
                        discovery:
                          description: 'Discovery specifies the options for the kubelet
                            to use during the TLS Bootstrap process TODO: revisit
                            when there is defaulting from k/k'
                          properties:
                            bootstrapToken:
                              description: BootstrapToken is used to set the options
                                for bootstrap token based discovery BootstrapToken
                                and File are mutually exclusive
                              properties:
                                apiServerEndpoint:
                                  description: APIServerEndpoint is an IP or domain
                                    name to the API server from which info will be
                                    fetched.
                                  type: string
                                caCertHashes:
                                  description: 'CACertHashes specifies a set of public
                                    key pins to verify when token-based discovery
                                    is used. The root CA found during discovery must
                                    match one of these values. Specifying an empty
                                    set disables root CA pinning, which can be unsafe.
                                    Each hash is specified as "<type>:<value>", where
                                    the only currently supported type is "sha256".
                                    This is a hex-encoded SHA-256 hash of the Subject
                                    Public Key Info (SPKI) object in DER-encoded ASN.1.
                                    These hashes can be calculated using, for example,
                                    OpenSSL: openssl x509 -pubkey -in ca.crt openssl
                                    rsa -pubin -outform der 2>&/dev/null | openssl
                                    dgst -sha256 -hex'
                                  items:
                                    type: string
                                  type: array
                                token:
                                  description: Token is a token used to validate cluster
                                    information fetched from the control-plane.
                                  type: string
                                unsafeSkipCAVerification:
                                  description: UnsafeSkipCAVerification allows token-based
                                    discovery without CA verification via CACertHashes.
                                    This can weaken the security of kubeadm since
                                    other nodes can impersonate the control-plane.
                                  type: boolean
                              required:
                              - token
                              - unsafeSkipCAVerification
                              type: object
                            file:
                              description: File is used to specify a file or URL to
                                a kubeconfig file from which to load cluster information
                                BootstrapToken and File are mutually exclusive
                              properties:
                                kubeConfigPath:
                                  description: KubeConfigPath is used to specify the
                                    actual file path or URL to the kubeconfig file
                                    from which to load cluster information
                                  type: string
                              required:
                              - kubeConfigPath
                              type: object
                            timeout:
                              description: Timeout modifies the discovery timeout
                              type: string
                            tlsBootstrapToken:
                              description: 'TLSBootstrapToken is a token used for
                                TLS bootstrapping. If .BootstrapToken is set, this
                                field is defaulted to .BootstrapToken.Token, but can
                                be overridden. If .File is set, this field **must
                                be set** in case the KubeConfigFile does not contain
                                any other authentication information TODO: revisit
                                when there is defaulting from k/k'
                              type: string
                          type: object
                        kind:
                          description: 'Kind is a string value representing the REST
                            resource this object represents. Servers may infer this
                            from the endpoint the client submits requests to. Cannot
                            be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                          type: string
                        nodeRegistration:
                          description: NodeRegistration holds fields that relate to
                            registering the new control-plane node to the cluster
                          properties:
                            criSocket:
                              description: CRISocket is used to retrieve container
                                runtime info. This information will be annotated to
                                the Node API object, for later re-use
                              type: string
                            kubeletExtraArgs:
                              additionalProperties:
                                type: string
                              description: KubeletExtraArgs passes through extra arguments
                                to the kubelet. The arguments here are passed to the
                                kubelet command line via the environment file kubeadm
                                writes at runtime for the kubelet to source. This
                                overrides the generic base-level configuration in
                                the kubelet-config-1.X ConfigMap Flags have higher
                                priority when parsing. These values are local and
                                specific to the node kubeadm is executing on.
                              type: object
                            name:
                              description: Name is the `.Metadata.Name` field of the
                                Node API object that will be created in this `kubeadm
                                init` or `kubeadm join` operation. This field is also
                                used in the CommonName field of the kubelet's client
                                certificate to the API server. Defaults to the hostname
                                of the node if not provided.
                              type: string
                            taints:
                              description: 'Taints specifies the taints the Node API
                                object should be registered with. If this field is
                                unset, i.e. nil, in the `kubeadm init` process it
                                will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                                If you don''t want to taint your control-plane node,
                                set this field to an empty slice, i.e. `taints: {}`
                                in the YAML file. This field is solely used for Node
                                registration.'
                              items:
                                description: The node this Taint is attached to has
                                  the "effect" on any pod that does not tolerate the
                                  Taint.
                                properties:
                                  effect:
                                    description: Required. The effect of the taint
                                      on pods that do not tolerate the taint. Valid
                                      effects are NoSchedule, PreferNoSchedule and
                                      NoExecute.
                                    type: string
                                  key:
                                    description: Required. The taint key to be applied
                                      to a node.
                                    type: string
                                  timeAdded:
                                    description: TimeAdded represents the time at
                                      which the taint was added. It is only written
                                      for NoExecute taints.
                                    format: date-time
                                    type: string
                                  value:
                                    description: Required. The taint value corresponding
                                      to the taint key.
                                    type: string
                                required:
                                - effect
                                - key
                                type: object
                              type: array
                          type: object
                      required:
                      - nodeRegistration
                      type: object
                    ntp:
                      description: NTP specifies NTP configuration
                      properties:
                        enabled:
                          description: Enabled specifies whether NTP should be enabled
                          type: boolean
                        servers:
                          description: Servers specifies which NTP servers to use
                          items:
                            type: string
                          type: array
                      type: object
                    postKubeadmCommands:
                      description: PostKubeadmCommands specifies extra commands to
                        run after kubeadm runs
                      items:
                        type: string
                      type: array
                    preKubeadmCommands:
                      description: PreKubeadmCommands specifies extra commands to
                        run before kubeadm runs
                      items:
                        type: string
                      type: array
                    users:
                      description: Users specifies extra users to add
                      items:
                        description: User defines the input for a generated user in
                          cloud-init.
                        properties:
                          gecos:
                            description: Gecos specifies the gecos to use for the
                              user
                            type: string
                          groups:
                            description: Groups specifies the additional groups for
                              the user
                            type: string
                          homeDir:
                            description: HomeDir specifies the home directory to use
                              for the user
                            type: string
                          inactive:
                            description: Inactive specifies whether to mark the user
                              as inactive
                            type: boolean
                          lockPassword:
                            description: LockPassword specifies if password login
                              should be disabled
                            type: boolean
                          name:
                            description: Name specifies the user name
                            type: string
                          passwd:
                            description: Passwd specifies a hashed password for the
                              user
                            type: string
                          primaryGroup:
                            description: PrimaryGroup specifies the primary group
                              for the user
                            type: string
                          shell:
                            description: Shell specifies the user's shell
                            type: string
                          sshAuthorizedKeys:
                            description: SSHAuthorizedKeys specifies a list of ssh
                              authorized keys for the user
                            items:
                              type: string
                            type: array
                          sudo:
                            description: Sudo specifies a sudo role for the user
                            type: string
                        required:
                        - name
                        type: object
                      type: array
                  type: object
              type: object
          required:
          - template
          type: object
      type: object
  version: v1alpha2
  versions:
  - name: v1alpha2
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: machinedeployments.cluster.x-k8s.io
spec:
  group: cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: MachineDeployment
    listKind: MachineDeploymentList
    plural: machinedeployments
    shortNames:
    - md
    singular: machinedeployment
  scope: Namespaced
  subresources:
    scale:
      labelSelectorPath: .status.selector
      specReplicasPath: .spec.replicas
      statusReplicasPath: .status.replicas
    status: {}
  validation:
    openAPIV3Schema:
      description: MachineDeployment is the Schema for the machinedeployments API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: MachineDeploymentSpec defines the desired state of MachineDeployment
          properties:
            minReadySeconds:
              description: Minimum number of seconds for which a newly created machine
                should be ready. Defaults to 0 (machine will be considered available
                as soon as it is ready)
              format: int32
              type: integer
            paused:
              description: Indicates that the deployment is paused.
              type: boolean
            progressDeadlineSeconds:
              description: The maximum time in seconds for a deployment to make progress
                before it is considered to be failed. The deployment controller will
                continue to process failed deployments and a condition with a ProgressDeadlineExceeded
                reason will be surfaced in the deployment status. Note that progress
                will not be estimated during the time a deployment is paused. Defaults
                to 600s.
              format: int32
              type: integer
            replicas:
              description: Number of desired machines. Defaults to 1. This is a pointer
                to distinguish between explicit zero and not specified.
              format: int32
              type: integer
            revisionHistoryLimit:
              description: The number of old MachineSets to retain to allow rollback.
                This is a pointer to distinguish between explicit zero and not specified.
                Defaults to 1.
              format: int32
              type: integer
            selector:
              description: Label selector for machines. Existing MachineSets whose
                machines are selected by this will be the ones affected by this deployment.
                It must match the machine template's labels.
              properties:
                matchExpressions:
                  description: matchExpressions is a list of label selector requirements.
                    The requirements are ANDed.
                  items:
                    description: A label selector requirement is a selector that contains
                      values, a key, and an operator that relates the key and values.
                    properties:
                      key:
                        description: key is the label key that the selector applies
                          to.
                        type: string
                      operator:
                        description: operator represents a key's relationship to a
                          set of values. Valid operators are In, NotIn, Exists and
                          DoesNotExist.
                        type: string
                      values:
                        description: values is an array of string values. If the operator
                          is In or NotIn, the values array must be non-empty. If the
                          operator is Exists or DoesNotExist, the values array must
                          be empty. This array is replaced during a strategic merge
                          patch.
                        items:
                          type: string
                        type: array
                    required:
                    - key
                    - operator
                    type: object
                  type: array
                matchLabels:
                  additionalProperties:
                    type: string
                  description: matchLabels is a map of {key,value} pairs. A single
                    {key,value} in the matchLabels map is equivalent to an element
                    of matchExpressions, whose key field is "key", the operator is
                    "In", and the values array contains only "value". The requirements
                    are ANDed.
                  type: object
              type: object
            strategy:
              description: The deployment strategy to use to replace existing machines
                with new ones.
              properties:
                rollingUpdate:
                  description: Rolling update config params. Present only if MachineDeploymentStrategyType
                    = RollingUpdate.
                  properties:
                    maxSurge:
                      anyOf:
                      - type: string
                      - type: integer
                      description: 'The maximum number of machines that can be scheduled
                        above the desired number of machines. Value can be an absolute
                        number (ex: 5) or a percentage of desired machines (ex: 10%).
                        This can not be 0 if MaxUnavailable is 0. Absolute number
                        is calculated from percentage by rounding up. Defaults to
                        1. Example: when this is set to 30%, the new MachineSet can
                        be scaled up immediately when the rolling update starts, such
                        that the total number of old and new machines do not exceed
                        130% of desired machines. Once old machines have been killed,
                        new MachineSet can be scaled up further, ensuring that total
                        number of machines running at any time during the update is
                        at most 130% of desired machines.'
                    maxUnavailable:
                      anyOf:
                      - type: string
                      - type: integer
                      description: 'The maximum number of machines that can be unavailable
                        during the update. Value can be an absolute number (ex: 5)
                        or a percentage of desired machines (ex: 10%). Absolute number
                        is calculated from percentage by rounding down. This can not
                        be 0 if MaxSurge is 0. Defaults to 0. Example: when this is
                        set to 30%, the old MachineSet can be scaled down to 70% of
                        desired machines immediately when the rolling update starts.
                        Once new machines are ready, old MachineSet can be scaled
                        down further, followed by scaling up the new MachineSet, ensuring
                        that the total number of machines available at all times during
                        the update is at least 70% of desired machines.'
                  type: object
                type:
                  description: Type of deployment. Currently the only supported strategy
                    is "RollingUpdate". Default is RollingUpdate.
                  type: string
              type: object
            template:
              description: Template describes the machines that will be created.
              properties:
                metadata:
                  description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                  properties:
                    annotations:
                      additionalProperties:
                        type: string
                      description: 'Annotations is an unstructured key value map stored
                        with a resource that may be set by external tools to store
                        and retrieve arbitrary metadata. They are not queryable and
                        should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                      type: object
                    generateName:
                      description: "GenerateName is an optional prefix, used by the
                        server, to generate a unique name ONLY IF the Name field has
                        not been provided. If this field is used, the name returned
                        to the client will be different than the name passed. This
                        value will also be combined with a unique suffix. The provided
                        value has the same validation rules as the Name field, and
                        may be truncated by the length of the suffix required to make
                        the value unique on the server. \n If this field is specified
                        and the generated name exists, the server will NOT return
                        a 409 - instead, it will either return 201 Created or 500
                        with Reason ServerTimeout indicating a unique name could not
                        be found in the time allotted, and the client should retry
                        (optionally after the time indicated in the Retry-After header).
                        \n Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                      type: string
                    labels:
                      additionalProperties:
                        type: string
                      description: 'Map of string keys and values that can be used
                        to organize and categorize (scope and select) objects. May
                        match selectors of replication controllers and services. More
                        info: http://kubernetes.io/docs/user-guide/labels'
                      type: object
                    name:
                      description: 'Name must be unique within a namespace. Is required
                        when creating resources, although some resources may allow
                        a client to request the generation of an appropriate name
                        automatically. Name is primarily intended for creation idempotence
                        and configuration definition. Cannot be updated. More info:
                        http://kubernetes.io/docs/user-guide/identifiers#names'
                      type: string
                    namespace:
                      description: "Namespace defines the space within each name must
                        be unique. An empty namespace is equivalent to the \"default\"
                        namespace, but \"default\" is the canonical representation.
                        Not all objects are required to be scoped to a namespace -
                        the value of this field for those objects will be empty. \n
                        Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
                      type: string
                    ownerReferences:
                      description: List of objects depended by this object. If ALL
                        objects in the list have been deleted, this object will be
                        garbage collected. If this object is managed by a controller,
                        then an entry in this list will point to this controller,
                        with the controller field set to true. There cannot be more
                        than one managing controller.
                      items:
                        description: OwnerReference contains enough information to
                          let you identify an owning object. An owning object must
                          be in the same namespace as the dependent, or be cluster-scoped,
                          so there is no namespace field.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          blockOwnerDeletion:
                            description: If true, AND if the owner has the "foregroundDeletion"
                              finalizer, then the owner cannot be deleted from the
                              key-value store until this reference is removed. Defaults
                              to false. To set this field, a user needs "delete" permission
                              of the owner, otherwise 422 (Unprocessable Entity) will
                              be returned.
                            type: boolean
                          controller:
                            description: If true, this reference points to the managing
                              controller.
                            type: boolean
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                            type: string
                        required:
                        - apiVersion
                        - kind
                        - name
                        - uid
                        type: object
                      type: array
                  type: object
                spec:
                  description: 'Specification of the desired behavior of the machine.
                    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                  properties:
                    bootstrap:
                      description: Bootstrap is a reference to a local struct which
                        encapsulates fields to configure the Machine’s bootstrapping
                        mechanism.
                      properties:
                        configRef:
                          description: ConfigRef is a reference to a bootstrap provider-specific
                            resource that holds configuration details. The reference
                            is optional to allow users/operators to specify Bootstrap.Data
                            without the need of a controller.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead
                                of an entire object, this string should contain a
                                valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                                For example, if the object reference is to a container
                                within a pod, this would take on a value like: "spec.containers{name}"
                                (where "name" refers to the name of the container
                                that triggered the event) or if no container name
                                is specified "spec.containers[2]" (container with
                                index 2 in this pod). This syntax is chosen only to
                                have some well-defined way of referencing a part of
                                an object. TODO: this design is not final and this
                                field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this
                                reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                        data:
                          description: Data contains the bootstrap data, such as cloud-init
                            details scripts. If nil, the Machine should remain in
                            the Pending state.
                          type: string
                      type: object
                    infrastructureRef:
                      description: InfrastructureRef is a required reference to a
                        custom resource offered by an infrastructure provider.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead
                            of an entire object, this string should contain a valid
                            JSON/Go field access statement, such as desiredState.manifest.containers[2].
                            For example, if the object reference is to a container
                            within a pod, this would take on a value like: "spec.containers{name}"
                            (where "name" refers to the name of the container that
                            triggered the event) or if no container name is specified
                            "spec.containers[2]" (container with index 2 in this pod).
                            This syntax is chosen only to have some well-defined way
                            of referencing a part of an object. TODO: this design
                            is not final and this field is subject to change in the
                            future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference
                            is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                    metadata:
                      description: 'DEPRECATED: ObjectMeta has no function and isn''t
                        used anywhere.'
                      properties:
                        annotations:
                          additionalProperties:
                            type: string
                          description: 'Annotations is an unstructured key value map
                            stored with a resource that may be set by external tools
                            to store and retrieve arbitrary metadata. They are not
                            queryable and should be preserved when modifying objects.
                            More info: http://kubernetes.io/docs/user-guide/annotations'
                          type: object
                        generateName:
                          description: "GenerateName is an optional prefix, used by
                            the server, to generate a unique name ONLY IF the Name
                            field has not been provided. If this field is used, the
                            name returned to the client will be different than the
                            name passed. This value will also be combined with a unique
                            suffix. The provided value has the same validation rules
                            as the Name field, and may be truncated by the length
                            of the suffix required to make the value unique on the
                            server. \n If this field is specified and the generated
                            name exists, the server will NOT return a 409 - instead,
                            it will either return 201 Created or 500 with Reason ServerTimeout
                            indicating a unique name could not be found in the time
                            allotted, and the client should retry (optionally after
                            the time indicated in the Retry-After header). \n Applied
                            only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                          type: string
                        labels:
                          additionalProperties:
                            type: string
                          description: 'Map of string keys and values that can be
                            used to organize and categorize (scope and select) objects.
                            May match selectors of replication controllers and services.
                            More info: http://kubernetes.io/docs/user-guide/labels'
                          type: object
                        name:
                          description: 'Name must be unique within a namespace. Is
                            required when creating resources, although some resources
                            may allow a client to request the generation of an appropriate
                            name automatically. Name is primarily intended for creation
                            idempotence and configuration definition. Cannot be updated.
                            More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                          type: string
                        namespace:
                          description: "Namespace defines the space within each name
                            must be unique. An empty namespace is equivalent to the
                            \"default\" namespace, but \"default\" is the canonical
                            representation. Not all objects are required to be scoped
                            to a namespace - the value of this field for those objects
                            will be empty. \n Must be a DNS_LABEL. Cannot be updated.
                            More info: http://kubernetes.io/docs/user-guide/namespaces"
                          type: string
                        ownerReferences:
                          description: List of objects depended by this object. If
                            ALL objects in the list have been deleted, this object
                            will be garbage collected. If this object is managed by
                            a controller, then an entry in this list will point to
                            this controller, with the controller field set to true.
                            There cannot be more than one managing controller.
                          items:
                            description: OwnerReference contains enough information
                              to let you identify an owning object. An owning object
                              must be in the same namespace as the dependent, or be
                              cluster-scoped, so there is no namespace field.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              blockOwnerDeletion:
                                description: If true, AND if the owner has the "foregroundDeletion"
                                  finalizer, then the owner cannot be deleted from
                                  the key-value store until this reference is removed.
                                  Defaults to false. To set this field, a user needs
                                  "delete" permission of the owner, otherwise 422
                                  (Unprocessable Entity) will be returned.
                                type: boolean
                              controller:
                                description: If true, this reference points to the
                                  managing controller.
                                type: boolean
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                                type: string
                            required:
                            - apiVersion
                            - kind
                            - name
                            - uid
                            type: object
                          type: array
                      type: object
                    providerID:
                      description: ProviderID is the identification ID of the machine
                        provided by the provider. This field must match the provider
                        ID as seen on the node object corresponding to this machine.
                        This field is required by higher level consumers of cluster-api.
                        Example use case is cluster autoscaler with cluster-api as
                        provider. Clean-up logic in the autoscaler compares machines
                        to nodes to find out machines at provider which could not
                        get registered as Kubernetes nodes. With cluster-api as a
                        generic out-of-tree provider for autoscaler, this field is
                        required by autoscaler to be able to have a provider view
                        of the list of machines. Another list of nodes is queried
                        from the k8s apiserver and then a comparison is done to find
                        out unregistered machines and are marked for delete. This
                        field will be set by the actuators and consumed by higher
                        level entities like autoscaler that will be interfacing with
                        cluster-api as generic provider.
                      type: string
                    version:
                      description: Version defines the desired Kubernetes version.
                        This field is meant to be optionally used by bootstrap providers.
                      type: string
                  required:
                  - bootstrap
                  - infrastructureRef
                  type: object
              type: object
          required:
          - selector
          - template
          type: object
        status:
          description: MachineDeploymentStatus defines the observed state of MachineDeployment
          properties:
            availableReplicas:
              description: Total number of available machines (ready for at least
                minReadySeconds) targeted by this deployment.
              format: int32
              type: integer
            observedGeneration:
              description: The generation observed by the deployment controller.
              format: int64
              type: integer
            readyReplicas:
              description: Total number of ready machines targeted by this deployment.
              format: int32
              type: integer
            replicas:
              description: Total number of non-terminated machines targeted by this
                deployment (their labels match the selector).
              format: int32
              type: integer
            selector:
              description: 'Selector is the same as the label selector but in the
                string format to avoid introspection by clients. The string will be
                in the same format as the query-param syntax. More info about label
                selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors'
              type: string
            unavailableReplicas:
              description: Total number of unavailable machines targeted by this deployment.
                This is the total number of machines that are still required for the
                deployment to have 100% available capacity. They may either be machines
                that are running but not yet available or machines that still have
                not been created.
              format: int32
              type: integer
            updatedReplicas:
              description: Total number of non-terminated machines targeted by this
                deployment that have the desired template spec.
              format: int32
              type: integer
          type: object
      type: object
  version: v1alpha2
  versions:
  - name: v1alpha2
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: machines.cluster.x-k8s.io
spec:
  additionalPrinterColumns:
  - JSONPath: .spec.providerID
    description: Provider ID
    name: ProviderID
    type: string
  - JSONPath: .status.phase
    description: Machine status such as Terminating/Pending/Running/Failed etc
    name: Phase
    type: string
  - JSONPath: .status.nodeRef.name
    description: Node name associated with this machine
    name: NodeName
    priority: 1
    type: string
  group: cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: Machine
    listKind: MachineList
    plural: machines
    shortNames:
    - ma
    singular: machine
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: Machine is the Schema for the machines API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: MachineSpec defines the desired state of Machine
          properties:
            bootstrap:
              description: Bootstrap is a reference to a local struct which encapsulates
                fields to configure the Machine’s bootstrapping mechanism.
              properties:
                configRef:
                  description: ConfigRef is a reference to a bootstrap provider-specific
                    resource that holds configuration details. The reference is optional
                    to allow users/operators to specify Bootstrap.Data without the
                    need of a controller.
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of
                        an entire object, this string should contain a valid JSON/Go
                        field access statement, such as desiredState.manifest.containers[2].
                        For example, if the object reference is to a container within
                        a pod, this would take on a value like: "spec.containers{name}"
                        (where "name" refers to the name of the container that triggered
                        the event) or if no container name is specified "spec.containers[2]"
                        (container with index 2 in this pod). This syntax is chosen
                        only to have some well-defined way of referencing a part of
                        an object. TODO: this design is not final and this field is
                        subject to change in the future.'
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                      type: string
                    resourceVersion:
                      description: 'Specific resourceVersion to which this reference
                        is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency'
                      type: string
                    uid:
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                      type: string
                  type: object
                data:
                  description: Data contains the bootstrap data, such as cloud-init
                    details scripts. If nil, the Machine should remain in the Pending
                    state.
                  type: string
              type: object
            infrastructureRef:
              description: InfrastructureRef is a required reference to a custom resource
                offered by an infrastructure provider.
              properties:
                apiVersion:
                  description: API version of the referent.
                  type: string
                fieldPath:
                  description: 'If referring to a piece of an object instead of an
                    entire object, this string should contain a valid JSON/Go field
                    access statement, such as desiredState.manifest.containers[2].
                    For example, if the object reference is to a container within
                    a pod, this would take on a value like: "spec.containers{name}"
                    (where "name" refers to the name of the container that triggered
                    the event) or if no container name is specified "spec.containers[2]"
                    (container with index 2 in this pod). This syntax is chosen only
                    to have some well-defined way of referencing a part of an object.
                    TODO: this design is not final and this field is subject to change
                    in the future.'
                  type: string
                kind:
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                  type: string
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                  type: string
                namespace:
                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                  type: string
                resourceVersion:
                  description: 'Specific resourceVersion to which this reference is
                    made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency'
                  type: string
                uid:
                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                  type: string
              type: object
            metadata:
              description: 'DEPRECATED: ObjectMeta has no function and isn''t used
                anywhere.'
              properties:
                annotations:
                  additionalProperties:
                    type: string
                  description: 'Annotations is an unstructured key value map stored
                    with a resource that may be set by external tools to store and
                    retrieve arbitrary metadata. They are not queryable and should
                    be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                  type: object
                generateName:
                  description: "GenerateName is an optional prefix, used by the server,
                    to generate a unique name ONLY IF the Name field has not been
                    provided. If this field is used, the name returned to the client
                    will be different than the name passed. This value will also be
                    combined with a unique suffix. The provided value has the same
                    validation rules as the Name field, and may be truncated by the
                    length of the suffix required to make the value unique on the
                    server. \n If this field is specified and the generated name exists,
                    the server will NOT return a 409 - instead, it will either return
                    201 Created or 500 with Reason ServerTimeout indicating a unique
                    name could not be found in the time allotted, and the client should
                    retry (optionally after the time indicated in the Retry-After
                    header). \n Applied only if Name is not specified. More info:
                    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                  type: string
                labels:
                  additionalProperties:
                    type: string
                  description: 'Map of string keys and values that can be used to
                    organize and categorize (scope and select) objects. May match
                    selectors of replication controllers and services. More info:
                    http://kubernetes.io/docs/user-guide/labels'
                  type: object
                name:
                  description: 'Name must be unique within a namespace. Is required
                    when creating resources, although some resources may allow a client
                    to request the generation of an appropriate name automatically.
                    Name is primarily intended for creation idempotence and configuration
                    definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                  type: string
                namespace:
                  description: "Namespace defines the space within each name must
                    be unique. An empty namespace is equivalent to the \"default\"
                    namespace, but \"default\" is the canonical representation. Not
                    all objects are required to be scoped to a namespace - the value
                    of this field for those objects will be empty. \n Must be a DNS_LABEL.
                    Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
                  type: string
                ownerReferences:
                  description: List of objects depended by this object. If ALL objects
                    in the list have been deleted, this object will be garbage collected.
                    If this object is managed by a controller, then an entry in this
                    list will point to this controller, with the controller field
                    set to true. There cannot be more than one managing controller.
                  items:
                    description: OwnerReference contains enough information to let
                      you identify an owning object. An owning object must be in the
                      same namespace as the dependent, or be cluster-scoped, so there
                      is no namespace field.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      blockOwnerDeletion:
                        description: If true, AND if the owner has the "foregroundDeletion"
                          finalizer, then the owner cannot be deleted from the key-value
                          store until this reference is removed. Defaults to false.
                          To set this field, a user needs "delete" permission of the
                          owner, otherwise 422 (Unprocessable Entity) will be returned.
                        type: boolean
                      controller:
                        description: If true, this reference points to the managing
                          controller.
                        type: boolean
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                        type: string
                    required:
                    - apiVersion
                    - kind
                    - name
                    - uid
                    type: object
                  type: array
              type: object
            providerID:
              description: ProviderID is the identification ID of the machine provided
                by the provider. This field must match the provider ID as seen on
                the node object corresponding to this machine. This field is required
                by higher level consumers of cluster-api. Example use case is cluster
                autoscaler with cluster-api as provider. Clean-up logic in the autoscaler
                compares machines to nodes to find out machines at provider which
                could not get registered as Kubernetes nodes. With cluster-api as
                a generic out-of-tree provider for autoscaler, this field is required
                by autoscaler to be able to have a provider view of the list of machines.
                Another list of nodes is queried from the k8s apiserver and then a
                comparison is done to find out unregistered machines and are marked
                for delete. This field will be set by the actuators and consumed by
                higher level entities like autoscaler that will be interfacing with
                cluster-api as generic provider.
              type: string
            version:
              description: Version defines the desired Kubernetes version. This field
                is meant to be optionally used by bootstrap providers.
              type: string
          required:
          - bootstrap
          - infrastructureRef
          type: object
        status:
          description: MachineStatus defines the observed state of Machine
          properties:
            addresses:
              description: Addresses is a list of addresses assigned to the machine.
                This field is copied from the infrastructure provider reference.
              items:
                description: MachineAddress contains information for the node's address.
                properties:
                  address:
                    description: The machine address.
                    type: string
                  type:
                    description: Machine address type, one of Hostname, ExternalIP
                      or InternalIP.
                    type: string
                required:
                - address
                - type
                type: object
              type: array
            bootstrapReady:
              description: BootstrapReady is the state of the bootstrap provider.
              type: boolean
            errorMessage:
              description: "ErrorMessage will be set in the event that there is a
                terminal problem reconciling the Machine and will contain a more verbose
                string suitable for logging and human consumption. \n This field should
                not be set for transitive errors that a controller faces that are
                expected to be fixed automatically over time (like service outages),
                but instead indicate that something is fundamentally wrong with the
                Machine's spec or the configuration of the controller, and that manual
                intervention is required. Examples of terminal errors would be invalid
                combinations of settings in the spec, values that are unsupported
                by the controller, or the responsible controller itself being critically
                misconfigured. \n Any transient errors that occur during the reconciliation
                of Machines can be added as events to the Machine object and/or logged
                in the controller's output."
              type: string
            errorReason:
              description: "ErrorReason will be set in the event that there is a terminal
                problem reconciling the Machine and will contain a succinct value
                suitable for machine interpretation. \n This field should not be set
                for transitive errors that a controller faces that are expected to
                be fixed automatically over time (like service outages), but instead
                indicate that something is fundamentally wrong with the Machine's
                spec or the configuration of the controller, and that manual intervention
                is required. Examples of terminal errors would be invalid combinations
                of settings in the spec, values that are unsupported by the controller,
                or the responsible controller itself being critically misconfigured.
                \n Any transient errors that occur during the reconciliation of Machines
                can be added as events to the Machine object and/or logged in the
                controller's output."
              type: string
            infrastructureReady:
              description: InfrastructureReady is the state of the infrastructure
                provider.
              type: boolean
            lastUpdated:
              description: LastUpdated identifies when this status was last observed.
              format: date-time
              type: string
            nodeRef:
              description: NodeRef will point to the corresponding Node if it exists.
              properties:
                apiVersion:
                  description: API version of the referent.
                  type: string
                fieldPath:
                  description: 'If referring to a piece of an object instead of an
                    entire object, this string should contain a valid JSON/Go field
                    access statement, such as desiredState.manifest.containers[2].
                    For example, if the object reference is to a container within
                    a pod, this would take on a value like: "spec.containers{name}"
                    (where "name" refers to the name of the container that triggered
                    the event) or if no container name is specified "spec.containers[2]"
                    (container with index 2 in this pod). This syntax is chosen only
                    to have some well-defined way of referencing a part of an object.
                    TODO: this design is not final and this field is subject to change
                    in the future.'
                  type: string
                kind:
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                  type: string
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                  type: string
                namespace:
                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                  type: string
                resourceVersion:
                  description: 'Specific resourceVersion to which this reference is
                    made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency'
                  type: string
                uid:
                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                  type: string
              type: object
            phase:
              description: Phase represents the current phase of machine actuation.
                E.g. Pending, Running, Terminating, Failed etc.
              type: string
            version:
              description: Version specifies the current version of Kubernetes running
                on the corresponding Node. This is meant to be a means of bubbling
                up status from the Node to the Machine. It is entirely optional, but
                useful for end-user UX if it’s present.
              type: string
          type: object
      type: object
  version: v1alpha2
  versions:
  - name: v1alpha2
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: machinesets.cluster.x-k8s.io
spec:
  group: cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: MachineSet
    listKind: MachineSetList
    plural: machinesets
    shortNames:
    - ms
    singular: machineset
  scope: Namespaced
  subresources:
    scale:
      labelSelectorPath: .status.selector
      specReplicasPath: .spec.replicas
      statusReplicasPath: .status.replicas
    status: {}
  validation:
    openAPIV3Schema:
      description: MachineSet is the Schema for the machinesets API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: MachineSetSpec defines the desired state of MachineSet
          properties:
            deletePolicy:
              description: DeletePolicy defines the policy used to identify nodes
                to delete when downscaling. Defaults to "Random".  Valid values are
                "Random, "Newest", "Oldest"
              enum:
              - Random
              - Newest
              - Oldest
              type: string
            minReadySeconds:
              description: MinReadySeconds is the minimum number of seconds for which
                a newly created machine should be ready. Defaults to 0 (machine will
                be considered available as soon as it is ready)
              format: int32
              type: integer
            replicas:
              description: Replicas is the number of desired replicas. This is a pointer
                to distinguish between explicit zero and unspecified. Defaults to
                1.
              format: int32
              type: integer
            selector:
              description: 'Selector is a label query over machines that should match
                the replica count. Label keys and values that must match in order
                to be controlled by this MachineSet. It must match the machine template''s
                labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors'
              properties:
                matchExpressions:
                  description: matchExpressions is a list of label selector requirements.
                    The requirements are ANDed.
                  items:
                    description: A label selector requirement is a selector that contains
                      values, a key, and an operator that relates the key and values.
                    properties:
                      key:
                        description: key is the label key that the selector applies
                          to.
                        type: string
                      operator:
                        description: operator represents a key's relationship to a
                          set of values. Valid operators are In, NotIn, Exists and
                          DoesNotExist.
                        type: string
                      values:
                        description: values is an array of string values. If the operator
                          is In or NotIn, the values array must be non-empty. If the
                          operator is Exists or DoesNotExist, the values array must
                          be empty. This array is replaced during a strategic merge
                          patch.
                        items:
                          type: string
                        type: array
                    required:
                    - key
                    - operator
                    type: object
                  type: array
                matchLabels:
                  additionalProperties:
                    type: string
                  description: matchLabels is a map of {key,value} pairs. A single
                    {key,value} in the matchLabels map is equivalent to an element
                    of matchExpressions, whose key field is "key", the operator is
                    "In", and the values array contains only "value". The requirements
                    are ANDed.
                  type: object
              type: object
            template:
              description: Template is the object that describes the machine that
                will be created if insufficient replicas are detected. Object references
                to custom resources resources are treated as templates.
              properties:
                metadata:
                  description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                  properties:
                    annotations:
                      additionalProperties:
                        type: string
                      description: 'Annotations is an unstructured key value map stored
                        with a resource that may be set by external tools to store
                        and retrieve arbitrary metadata. They are not queryable and
                        should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                      type: object
                    generateName:
                      description: "GenerateName is an optional prefix, used by the
                        server, to generate a unique name ONLY IF the Name field has
                        not been provided. If this field is used, the name returned
                        to the client will be different than the name passed. This
                        value will also be combined with a unique suffix. The provided
                        value has the same validation rules as the Name field, and
                        may be truncated by the length of the suffix required to make
                        the value unique on the server. \n If this field is specified
                        and the generated name exists, the server will NOT return
                        a 409 - instead, it will either return 201 Created or 500
                        with Reason ServerTimeout indicating a unique name could not
                        be found in the time allotted, and the client should retry
                        (optionally after the time indicated in the Retry-After header).
                        \n Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                      type: string
                    labels:
                      additionalProperties:
                        type: string
                      description: 'Map of string keys and values that can be used
                        to organize and categorize (scope and select) objects. May
                        match selectors of replication controllers and services. More
                        info: http://kubernetes.io/docs/user-guide/labels'
                      type: object
                    name:
                      description: 'Name must be unique within a namespace. Is required
                        when creating resources, although some resources may allow
                        a client to request the generation of an appropriate name
                        automatically. Name is primarily intended for creation idempotence
                        and configuration definition. Cannot be updated. More info:
                        http://kubernetes.io/docs/user-guide/identifiers#names'
                      type: string
                    namespace:
                      description: "Namespace defines the space within each name must
                        be unique. An empty namespace is equivalent to the \"default\"
                        namespace, but \"default\" is the canonical representation.
                        Not all objects are required to be scoped to a namespace -
                        the value of this field for those objects will be empty. \n
                        Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
                      type: string
                    ownerReferences:
                      description: List of objects depended by this object. If ALL
                        objects in the list have been deleted, this object will be
                        garbage collected. If this object is managed by a controller,
                        then an entry in this list will point to this controller,
                        with the controller field set to true. There cannot be more
                        than one managing controller.
                      items:
                        description: OwnerReference contains enough information to
                          let you identify an owning object. An owning object must
                          be in the same namespace as the dependent, or be cluster-scoped,
                          so there is no namespace field.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          blockOwnerDeletion:
                            description: If true, AND if the owner has the "foregroundDeletion"
                              finalizer, then the owner cannot be deleted from the
                              key-value store until this reference is removed. Defaults
                              to false. To set this field, a user needs "delete" permission
                              of the owner, otherwise 422 (Unprocessable Entity) will
                              be returned.
                            type: boolean
                          controller:
                            description: If true, this reference points to the managing
                              controller.
                            type: boolean
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                            type: string
                        required:
                        - apiVersion
                        - kind
                        - name
                        - uid
                        type: object
                      type: array
                  type: object
                spec:
                  description: 'Specification of the desired behavior of the machine.
                    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                  properties:
                    bootstrap:
                      description: Bootstrap is a reference to a local struct which
                        encapsulates fields to configure the Machine’s bootstrapping
                        mechanism.
                      properties:
                        configRef:
                          description: ConfigRef is a reference to a bootstrap provider-specific
                            resource that holds configuration details. The reference
                            is optional to allow users/operators to specify Bootstrap.Data
                            without the need of a controller.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead
                                of an entire object, this string should contain a
                                valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                                For example, if the object reference is to a container
                                within a pod, this would take on a value like: "spec.containers{name}"
                                (where "name" refers to the name of the container
                                that triggered the event) or if no container name
                                is specified "spec.containers[2]" (container with
                                index 2 in this pod). This syntax is chosen only to
                                have some well-defined way of referencing a part of
                                an object. TODO: this design is not final and this
                                field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this
                                reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                        data:
                          description: Data contains the bootstrap data, such as cloud-init
                            details scripts. If nil, the Machine should remain in
                            the Pending state.
                          type: string
                      type: object
                    infrastructureRef:
                      description: InfrastructureRef is a required reference to a
                        custom resource offered by an infrastructure provider.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead
                            of an entire object, this string should contain a valid
                            JSON/Go field access statement, such as desiredState.manifest.containers[2].
                            For example, if the object reference is to a container
                            within a pod, this would take on a value like: "spec.containers{name}"
                            (where "name" refers to the name of the container that
                            triggered the event) or if no container name is specified
                            "spec.containers[2]" (container with index 2 in this pod).
                            This syntax is chosen only to have some well-defined way
                            of referencing a part of an object. TODO: this design
                            is not final and this field is subject to change in the
                            future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference
                            is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                    metadata:
                      description: 'DEPRECATED: ObjectMeta has no function and isn''t
                        used anywhere.'
                      properties:
                        annotations:
                          additionalProperties:
                            type: string
                          description: 'Annotations is an unstructured key value map
                            stored with a resource that may be set by external tools
                            to store and retrieve arbitrary metadata. They are not
                            queryable and should be preserved when modifying objects.
                            More info: http://kubernetes.io/docs/user-guide/annotations'
                          type: object
                        generateName:
                          description: "GenerateName is an optional prefix, used by
                            the server, to generate a unique name ONLY IF the Name
                            field has not been provided. If this field is used, the
                            name returned to the client will be different than the
                            name passed. This value will also be combined with a unique
                            suffix. The provided value has the same validation rules
                            as the Name field, and may be truncated by the length
                            of the suffix required to make the value unique on the
                            server. \n If this field is specified and the generated
                            name exists, the server will NOT return a 409 - instead,
                            it will either return 201 Created or 500 with Reason ServerTimeout
                            indicating a unique name could not be found in the time
                            allotted, and the client should retry (optionally after
                            the time indicated in the Retry-After header). \n Applied
                            only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                          type: string
                        labels:
                          additionalProperties:
                            type: string
                          description: 'Map of string keys and values that can be
                            used to organize and categorize (scope and select) objects.
                            May match selectors of replication controllers and services.
                            More info: http://kubernetes.io/docs/user-guide/labels'
                          type: object
                        name:
                          description: 'Name must be unique within a namespace. Is
                            required when creating resources, although some resources
                            may allow a client to request the generation of an appropriate
                            name automatically. Name is primarily intended for creation
                            idempotence and configuration definition. Cannot be updated.
                            More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                          type: string
                        namespace:
                          description: "Namespace defines the space within each name
                            must be unique. An empty namespace is equivalent to the
                            \"default\" namespace, but \"default\" is the canonical
                            representation. Not all objects are required to be scoped
                            to a namespace - the value of this field for those objects
                            will be empty. \n Must be a DNS_LABEL. Cannot be updated.
                            More info: http://kubernetes.io/docs/user-guide/namespaces"
                          type: string
                        ownerReferences:
                          description: List of objects depended by this object. If
                            ALL objects in the list have been deleted, this object
                            will be garbage collected. If this object is managed by
                            a controller, then an entry in this list will point to
                            this controller, with the controller field set to true.
                            There cannot be more than one managing controller.
                          items:
                            description: OwnerReference contains enough information
                              to let you identify an owning object. An owning object
                              must be in the same namespace as the dependent, or be
                              cluster-scoped, so there is no namespace field.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              blockOwnerDeletion:
                                description: If true, AND if the owner has the "foregroundDeletion"
                                  finalizer, then the owner cannot be deleted from
                                  the key-value store until this reference is removed.
                                  Defaults to false. To set this field, a user needs
                                  "delete" permission of the owner, otherwise 422
                                  (Unprocessable Entity) will be returned.
                                type: boolean
                              controller:
                                description: If true, this reference points to the
                                  managing controller.
                                type: boolean
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                                type: string
                            required:
                            - apiVersion
                            - kind
                            - name
                            - uid
                            type: object
                          type: array
                      type: object
                    providerID:
                      description: ProviderID is the identification ID of the machine
                        provided by the provider. This field must match the provider
                        ID as seen on the node object corresponding to this machine.
                        This field is required by higher level consumers of cluster-api.
                        Example use case is cluster autoscaler with cluster-api as
                        provider. Clean-up logic in the autoscaler compares machines
                        to nodes to find out machines at provider which could not
                        get registered as Kubernetes nodes. With cluster-api as a
                        generic out-of-tree provider for autoscaler, this field is
                        required by autoscaler to be able to have a provider view
                        of the list of machines. Another list of nodes is queried
                        from the k8s apiserver and then a comparison is done to find
                        out unregistered machines and are marked for delete. This
                        field will be set by the actuators and consumed by higher
                        level entities like autoscaler that will be interfacing with
                        cluster-api as generic provider.
                      type: string
                    version:
                      description: Version defines the desired Kubernetes version.
                        This field is meant to be optionally used by bootstrap providers.
                      type: string
                  required:
                  - bootstrap
                  - infrastructureRef
                  type: object
              type: object
          required:
          - selector
          type: object
        status:
          description: MachineSetStatus defines the observed state of MachineSet
          properties:
            availableReplicas:
              description: The number of available replicas (ready for at least minReadySeconds)
                for this MachineSet.
              format: int32
              type: integer
            errorMessage:
              type: string
            errorReason:
              description: "In the event that there is a terminal problem reconciling
                the replicas, both ErrorReason and ErrorMessage will be set. ErrorReason
                will be populated with a succinct value suitable for machine interpretation,
                while ErrorMessage will contain a more verbose string suitable for
                logging and human consumption. \n These fields should not be set for
                transitive errors that a controller faces that are expected to be
                fixed automatically over time (like service outages), but instead
                indicate that something is fundamentally wrong with the MachineTemplate's
                spec or the configuration of the machine controller, and that manual
                intervention is required. Examples of terminal errors would be invalid
                combinations of settings in the spec, values that are unsupported
                by the machine controller, or the responsible machine controller itself
                being critically misconfigured. \n Any transient errors that occur
                during the reconciliation of Machines can be added as events to the
                MachineSet object and/or logged in the controller's output."
              type: string
            fullyLabeledReplicas:
              description: The number of replicas that have labels matching the labels
                of the machine template of the MachineSet.
              format: int32
              type: integer
            observedGeneration:
              description: ObservedGeneration reflects the generation of the most
                recently observed MachineSet.
              format: int64
              type: integer
            readyReplicas:
              description: The number of ready replicas for this MachineSet. A machine
                is considered ready when the node has been created and is "Ready".
              format: int32
              type: integer
            replicas:
              description: Replicas is the most recently observed number of replicas.
              format: int32
              type: integer
            selector:
              description: 'Selector is the same as the label selector but in the
                string format to avoid introspection by clients. The string will be
                in the same format as the query-param syntax. More info about label
                selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors'
              type: string
          required:
          - replicas
          type: object
      type: object
  version: v1alpha2
  versions:
  - name: v1alpha2
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: openstackclusters.infrastructure.cluster.x-k8s.io
spec:
  group: infrastructure.cluster.x-k8s.io
  names:
    kind: OpenStackCluster
    plural: openstackclusters
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: OpenStackCluster is the Schema for the openstackclusters API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: OpenStackClusterSpec defines the desired state of OpenStackCluster
          properties:
            apiServerLoadBalancerAdditionalPorts:
              description: APIServerLoadBalancerAdditionalPorts adds additional ports
                to the APIServerLoadBalancer
              items:
                type: integer
              type: array
            apiServerLoadBalancerFloatingIP:
              description: APIServerLoadBalancerFloatingIP is the floatingIP which
                will be associated to the APIServer loadbalancer. The floatingIP will
                be created if it not already exists.
              type: string
            apiServerLoadBalancerPort:
              description: APIServerLoadBalancerPort is the port on which the listener
                on the APIServer loadbalancer will be created
              type: integer
            caKeyPair:
              description: CAKeyPair is the key pair for ca certs.
              properties:
                cert:
                  description: base64 encoded cert and key
                  format: byte
                  type: string
                key:
                  format: byte
                  type: string
              type: object
            cloudName:
              description: The name of the cloud to use from the clouds secret
              type: string
            cloudsSecret:
              description: The name of the secret containing the openstack credentials
              properties:
                name:
                  description: Name is unique within a namespace to reference a secret
                    resource.
                  type: string
                namespace:
                  description: Namespace defines the space within which the secret
                    name must be unique.
                  type: string
              type: object
            disablePortSecurity:
              description: DisablePortSecurity disables the port security of the network
                created for the Kubernetes cluster, which also disables SecurityGroups
              type: boolean
            disableServerTags:
              description: 'Default: True. In case of server tag errors, set to False'
              type: boolean
            dnsNameservers:
              description: DNSNameservers is the list of nameservers for OpenStack
                Subnet being created.
              items:
                type: string
              type: array
            etcdCAKeyPair:
              description: EtcdCAKeyPair is the key pair for etcd.
              properties:
                cert:
                  description: base64 encoded cert and key
                  format: byte
                  type: string
                key:
                  format: byte
                  type: string
              type: object
            externalNetworkId:
              description: ExternalNetworkID is the ID of an external OpenStack Network.
                This is necessary to get public internet to the VMs.
              type: string
            externalRouterIPs:
              description: ExternalRouterIPs is an array of externalIPs on the respective
                subnets. This is necessary if the router needs a fixed ip in a specific
                subnet.
              items:
                properties:
                  fixedIP:
                    description: The FixedIP in the corresponding subnet
                    type: string
                  subnet:
                    description: The subnet in which the FixedIP is used for the Gateway
                      of this router
                    properties:
                      filter:
                        description: Filters for optional network query
                        properties:
                          cidr:
                            type: string
                          description:
                            type: string
                          enableDhcp:
                            type: boolean
                          gateway_ip:
                            type: string
                          id:
                            type: string
                          ipVersion:
                            type: integer
                          ipv6AddressMode:
                            type: string
                          ipv6RaMode:
                            type: string
                          limit:
                            type: integer
                          marker:
                            type: string
                          name:
                            type: string
                          networkId:
                            type: string
                          notTags:
                            type: string
                          notTagsAny:
                            type: string
                          projectId:
                            type: string
                          sortDir:
                            type: string
                          sortKey:
                            type: string
                          subnetpoolId:
                            type: string
                          tags:
                            type: string
                          tagsAny:
                            type: string
                          tenantId:
                            type: string
                        type: object
                      uuid:
                        description: The UUID of the network. Required if you omit
                          the port attribute.
                        type: string
                    type: object
                required:
                - subnet
                type: object
              type: array
            frontProxyCAKeyPair:
              description: FrontProxyCAKeyPair is the key pair for FrontProxyKeyPair.
              properties:
                cert:
                  description: base64 encoded cert and key
                  format: byte
                  type: string
                key:
                  format: byte
                  type: string
              type: object
            managedAPIServerLoadBalancer:
              description: 'ManagedAPIServerLoadBalancer defines whether a LoadBalancer
                for the APIServer should be created. If set to true the following
                properties are mandatory: APIServerLoadBalancerFloatingIP, APIServerLoadBalancerPort'
              type: boolean
            managedSecurityGroups:
              description: ManagedSecurityGroups defines that kubernetes manages the
                OpenStack security groups for now, that means that we'll create two
                security groups, one allowing SSH and API access from everywhere,
                and another one that allows all traffic to/from machines belonging
                to that group. In the future, we could make this more flexible.
              type: boolean
            network:
              description: If NodeCIDR cannot be set this can be used to detect an
                existing network.
              properties:
                adminStateUp:
                  type: boolean
                description:
                  type: string
                id:
                  type: string
                limit:
                  type: integer
                marker:
                  type: string
                name:
                  type: string
                notTags:
                  type: string
                notTagsAny:
                  type: string
                projectId:
                  type: string
                shared:
                  type: boolean
                sortDir:
                  type: string
                sortKey:
                  type: string
                status:
                  type: string
                tags:
                  type: string
                tagsAny:
                  type: string
                tenantId:
                  type: string
              type: object
            nodeCidr:
              description: NodeCIDR is the OpenStack Subnet to be created. Cluster
                actuator will create a network, a subnet with NodeCIDR, and a router
                connected to this subnet. If you leave this empty, no network will
                be created.
              type: string
            saKeyPair:
              description: SAKeyPair is the service account key pair.
              properties:
                cert:
                  description: base64 encoded cert and key
                  format: byte
                  type: string
                key:
                  format: byte
                  type: string
              type: object
            subnet:
              description: If NodeCIDR cannot be set this can be used to detect an
                existing subnet.
              properties:
                cidr:
                  type: string
                description:
                  type: string
                enableDhcp:
                  type: boolean
                gateway_ip:
                  type: string
                id:
                  type: string
                ipVersion:
                  type: integer
                ipv6AddressMode:
                  type: string
                ipv6RaMode:
                  type: string
                limit:
                  type: integer
                marker:
                  type: string
                name:
                  type: string
                networkId:
                  type: string
                notTags:
                  type: string
                notTagsAny:
                  type: string
                projectId:
                  type: string
                sortDir:
                  type: string
                sortKey:
                  type: string
                subnetpoolId:
                  type: string
                tags:
                  type: string
                tagsAny:
                  type: string
                tenantId:
                  type: string
              type: object
            tags:
              description: Tags for all resources in cluster
              items:
                type: string
              type: array
            useOctavia:
              description: UseOctavia is weather LoadBalancer Service is Octavia or
                not
              type: boolean
          type: object
        status:
          description: OpenStackClusterStatus defines the observed state of OpenStackCluster
          properties:
            apiEndpoints:
              description: APIEndpoints represents the endpoints to communicate with
                the control plane.
              items:
                description: APIEndpoint represents a reachable Kubernetes API endpoint.
                properties:
                  host:
                    description: The hostname on which the API server is serving.
                    type: string
                  port:
                    description: The port on which the API server is serving.
                    type: integer
                required:
                - host
                - port
                type: object
              type: array
            controlPlaneSecurityGroup:
              description: 'ControlPlaneSecurityGroups contains all the information
                about the OpenStack Security Group that needs to be applied to control
                plane nodes. TODO: Maybe instead of two properties, we add a property
                to the group?'
              properties:
                id:
                  type: string
                name:
                  type: string
                rules:
                  items:
                    description: SecurityGroupRule represent the basic information
                      of the associated OpenStack Security Group Role.
                    properties:
                      direction:
                        type: string
                      etherType:
                        type: string
                      name:
                        type: string
                      portRangeMax:
                        type: integer
                      portRangeMin:
                        type: integer
                      protocol:
                        type: string
                      remoteGroupID:
                        type: string
                      remoteIPPrefix:
                        type: string
                      securityGroupID:
                        type: string
                    required:
                    - direction
                    - etherType
                    - name
                    - portRangeMax
                    - portRangeMin
                    - protocol
                    - remoteGroupID
                    - remoteIPPrefix
                    - securityGroupID
                    type: object
                  type: array
              required:
              - id
              - name
              - rules
              type: object
            globalSecurityGroup:
              description: GlobalSecurityGroup contains all the information about
                the OpenStack Security Group that needs to be applied to all nodes,
                both control plane and worker nodes.
              properties:
                id:
                  type: string
                name:
                  type: string
                rules:
                  items:
                    description: SecurityGroupRule represent the basic information
                      of the associated OpenStack Security Group Role.
                    properties:
                      direction:
                        type: string
                      etherType:
                        type: string
                      name:
                        type: string
                      portRangeMax:
                        type: integer
                      portRangeMin:
                        type: integer
                      protocol:
                        type: string
                      remoteGroupID:
                        type: string
                      remoteIPPrefix:
                        type: string
                      securityGroupID:
                        type: string
                    required:
                    - direction
                    - etherType
                    - name
                    - portRangeMax
                    - portRangeMin
                    - protocol
                    - remoteGroupID
                    - remoteIPPrefix
                    - securityGroupID
                    type: object
                  type: array
              required:
              - id
              - name
              - rules
              type: object
            network:
              description: Network contains all information about the created OpenStack
                Network. It includes Subnets and Router.
              properties:
                apiServerLoadBalancer:
                  description: Be careful when using APIServerLoadBalancer, because
                    this field is optional and therefore not set in all cases
                  properties:
                    id:
                      type: string
                    internalIP:
                      type: string
                    ip:
                      type: string
                    name:
                      type: string
                  required:
                  - id
                  - internalIP
                  - ip
                  - name
                  type: object
                id:
                  type: string
                name:
                  type: string
                router:
                  description: Router represents basic information about the associated
                    OpenStack Neutron Router
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                  required:
                  - id
                  - name
                  type: object
                subnet:
                  description: Subnet represents basic information about the associated
                    OpenStack Neutron Subnet
                  properties:
                    cidr:
                      type: string
                    id:
                      type: string
                    name:
                      type: string
                  required:
                  - cidr
                  - id
                  - name
                  type: object
              required:
              - id
              - name
              type: object
            ready:
              type: boolean
          required:
          - ready
          type: object
      type: object
  version: v1alpha2
  versions:
  - name: v1alpha2
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: openstackmachines.infrastructure.cluster.x-k8s.io
spec:
  group: infrastructure.cluster.x-k8s.io
  names:
    kind: OpenStackMachine
    plural: openstackmachines
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: OpenStackMachine is the Schema for the openstackmachines API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: OpenStackMachineSpec defines the desired state of OpenStackMachine
          properties:
            availabilityZone:
              description: The availability zone from which to launch the server.
              type: string
            cloudName:
              description: The name of the cloud to use from the clouds secret
              type: string
            cloudsSecret:
              description: The name of the secret containing the openstack credentials
              properties:
                name:
                  description: Name is unique within a namespace to reference a secret
                    resource.
                  type: string
                namespace:
                  description: Namespace defines the space within which the secret
                    name must be unique.
                  type: string
              type: object
            configDrive:
              description: Config Drive support
              type: boolean
            flavor:
              description: The flavor reference for the flavor for your server instance.
              type: string
            floatingIP:
              description: The floatingIP which will be associated to the machine,
                only used for master. The floatingIP should have been created and
                haven't been associated.
              type: string
            image:
              description: The name of the image to use for your server instance.
                If the RootVolume is specified, this will be ignored and use rootVolume
                directly.
              type: string
            networks:
              description: A networks object. Required parameter when there are multiple
                networks defined for the tenant. When you do not specify the networks
                parameter, the server attaches to the only network created for the
                current tenant.
              items:
                properties:
                  filter:
                    description: Filters for optional network query
                    properties:
                      adminStateUp:
                        type: boolean
                      description:
                        type: string
                      id:
                        type: string
                      limit:
                        type: integer
                      marker:
                        type: string
                      name:
                        type: string
                      notTags:
                        type: string
                      notTagsAny:
                        type: string
                      projectId:
                        type: string
                      shared:
                        type: boolean
                      sortDir:
                        type: string
                      sortKey:
                        type: string
                      status:
                        type: string
                      tags:
                        type: string
                      tagsAny:
                        type: string
                      tenantId:
                        type: string
                    type: object
                  fixedIp:
                    description: A fixed IPv4 address for the NIC.
                    type: string
                  subnets:
                    description: Subnet within a network to use
                    items:
                      properties:
                        filter:
                          description: Filters for optional network query
                          properties:
                            cidr:
                              type: string
                            description:
                              type: string
                            enableDhcp:
                              type: boolean
                            gateway_ip:
                              type: string
                            id:
                              type: string
                            ipVersion:
                              type: integer
                            ipv6AddressMode:
                              type: string
                            ipv6RaMode:
                              type: string
                            limit:
                              type: integer
                            marker:
                              type: string
                            name:
                              type: string
                            networkId:
                              type: string
                            notTags:
                              type: string
                            notTagsAny:
                              type: string
                            projectId:
                              type: string
                            sortDir:
                              type: string
                            sortKey:
                              type: string
                            subnetpoolId:
                              type: string
                            tags:
                              type: string
                            tagsAny:
                              type: string
                            tenantId:
                              type: string
                          type: object
                        uuid:
                          description: The UUID of the network. Required if you omit
                            the port attribute.
                          type: string
                      type: object
                    type: array
                  uuid:
                    description: The UUID of the network. Required if you omit the
                      port attribute.
                    type: string
                type: object
              type: array
            providerID:
              description: ProviderID is the unique identifier as specified by the
                cloud provider.
              type: string
            rootVolume:
              description: The volume metadata to boot from
              properties:
                deviceType:
                  type: string
                diskSize:
                  type: integer
                sourceType:
                  type: string
                sourceUUID:
                  type: string
              type: object
            securityGroups:
              description: The names of the security groups to assign to the instance
              items:
                properties:
                  filter:
                    description: Filters used to query security groups in openstack
                    properties:
                      description:
                        type: string
                      id:
                        type: string
                      limit:
                        type: integer
                      marker:
                        type: string
                      name:
                        type: string
                      notTags:
                        type: string
                      notTagsAny:
                        type: string
                      projectId:
                        type: string
                      sortDir:
                        type: string
                      sortKey:
                        type: string
                      tags:
                        type: string
                      tagsAny:
                        type: string
                      tenantId:
                        type: string
                    type: object
                  name:
                    description: Security Group name
                    type: string
                  uuid:
                    description: Security Group UID
                    type: string
                type: object
              type: array
            serverMetadata:
              additionalProperties:
                type: string
              description: Metadata mapping. Allows you to create a map of key value
                pairs to add to the server instance.
              type: object
            sshKeyName:
              description: The ssh key to inject in the instance
              type: string
            tags:
              description: Machine tags Requires Nova api 2.52 minimum!
              items:
                type: string
              type: array
            trunk:
              description: Whether the server instance is created on a trunk port
                or not.
              type: boolean
            userDataSecret:
              description: The name of the secret containing the user data (startup
                script in most cases)
              properties:
                name:
                  description: Name is unique within a namespace to reference a secret
                    resource.
                  type: string
                namespace:
                  description: Namespace defines the space within which the secret
                    name must be unique.
                  type: string
              type: object
          required:
          - flavor
          - image
          type: object
        status:
          description: OpenStackMachineStatus defines the observed state of OpenStackMachine
          properties:
            addresses:
              description: Addresses contains the OpenStack instance associated addresses.
              items:
                description: NodeAddress contains information for the node's address.
                properties:
                  address:
                    description: The node address.
                    type: string
                  type:
                    description: Node address type, one of Hostname, ExternalIP or
                      InternalIP.
                    type: string
                required:
                - address
                - type
                type: object
              type: array
            errorMessage:
              description: "ErrorMessage will be set in the event that there is a
                terminal problem reconciling the Machine and will contain a more verbose
                string suitable for logging and human consumption. \n This field should
                not be set for transitive errors that a controller faces that are
                expected to be fixed automatically over time (like service outages),
                but instead indicate that something is fundamentally wrong with the
                Machine's spec or the configuration of the controller, and that manual
                intervention is required. Examples of terminal errors would be invalid
                combinations of settings in the spec, values that are unsupported
                by the controller, or the responsible controller itself being critically
                misconfigured. \n Any transient errors that occur during the reconciliation
                of Machines can be added as events to the Machine object and/or logged
                in the controller's output."
              type: string
            errorReason:
              description: Constants aren't automatically generated for unversioned
                packages. Instead share the same constant for all versioned packages
              type: string
            instanceState:
              description: InstanceState is the state of the OpenStack instance for
                this machine.
              type: string
            ready:
              description: Ready is true when the provider resource is ready.
              type: boolean
          type: object
      type: object
  version: v1alpha2
  versions:
  - name: v1alpha2
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: openstackmachinetemplates.infrastructure.cluster.x-k8s.io
spec:
  group: infrastructure.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: OpenStackMachineTemplate
    plural: openstackmachinetemplates
  scope: Namespaced
  validation:
    openAPIV3Schema:
      description: OpenStackMachineTemplate is the Schema for the openstackmachinetemplates
        API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: OpenStackMachineTemplateSpec defines the desired state of OpenStackMachineTemplate
          properties:
            template:
              description: OpenStackMachineTemplateResource describes the data needed
                to create a OpenStackMachine from a template
              properties:
                spec:
                  description: Spec is the specification of the desired behavior of
                    the machine.
                  properties:
                    availabilityZone:
                      description: The availability zone from which to launch the
                        server.
                      type: string
                    cloudName:
                      description: The name of the cloud to use from the clouds secret
                      type: string
                    cloudsSecret:
                      description: The name of the secret containing the openstack
                        credentials
                      properties:
                        name:
                          description: Name is unique within a namespace to reference
                            a secret resource.
                          type: string
                        namespace:
                          description: Namespace defines the space within which the
                            secret name must be unique.
                          type: string
                      type: object
                    configDrive:
                      description: Config Drive support
                      type: boolean
                    flavor:
                      description: The flavor reference for the flavor for your server
                        instance.
                      type: string
                    floatingIP:
                      description: The floatingIP which will be associated to the
                        machine, only used for master. The floatingIP should have
                        been created and haven't been associated.
                      type: string
                    image:
                      description: The name of the image to use for your server instance.
                        If the RootVolume is specified, this will be ignored and use
                        rootVolume directly.
                      type: string
                    networks:
                      description: A networks object. Required parameter when there
                        are multiple networks defined for the tenant. When you do
                        not specify the networks parameter, the server attaches to
                        the only network created for the current tenant.
                      items:
                        properties:
                          filter:
                            description: Filters for optional network query
                            properties:
                              adminStateUp:
                                type: boolean
                              description:
                                type: string
                              id:
                                type: string
                              limit:
                                type: integer
                              marker:
                                type: string
                              name:
                                type: string
                              notTags:
                                type: string
                              notTagsAny:
                                type: string
                              projectId:
                                type: string
                              shared:
                                type: boolean
                              sortDir:
                                type: string
                              sortKey:
                                type: string
                              status:
                                type: string
                              tags:
                                type: string
                              tagsAny:
                                type: string
                              tenantId:
                                type: string
                            type: object
                          fixedIp:
                            description: A fixed IPv4 address for the NIC.
                            type: string
                          subnets:
                            description: Subnet within a network to use
                            items:
                              properties:
                                filter:
                                  description: Filters for optional network query
                                  properties:
                                    cidr:
                                      type: string
                                    description:
                                      type: string
                                    enableDhcp:
                                      type: boolean
                                    gateway_ip:
                                      type: string
                                    id:
                                      type: string
                                    ipVersion:
                                      type: integer
                                    ipv6AddressMode:
                                      type: string
                                    ipv6RaMode:
                                      type: string
                                    limit:
                                      type: integer
                                    marker:
                                      type: string
                                    name:
                                      type: string
                                    networkId:
                                      type: string
                                    notTags:
                                      type: string
                                    notTagsAny:
                                      type: string
                                    projectId:
                                      type: string
                                    sortDir:
                                      type: string
                                    sortKey:
                                      type: string
                                    subnetpoolId:
                                      type: string
                                    tags:
                                      type: string
                                    tagsAny:
                                      type: string
                                    tenantId:
                                      type: string
                                  type: object
                                uuid:
                                  description: The UUID of the network. Required if
                                    you omit the port attribute.
                                  type: string
                              type: object
                            type: array
                          uuid:
                            description: The UUID of the network. Required if you
                              omit the port attribute.
                            type: string
                        type: object
                      type: array
                    providerID:
                      description: ProviderID is the unique identifier as specified
                        by the cloud provider.
                      type: string
                    rootVolume:
                      description: The volume metadata to boot from
                      properties:
                        deviceType:
                          type: string
                        diskSize:
                          type: integer
                        sourceType:
                          type: string
                        sourceUUID:
                          type: string
                      type: object
                    securityGroups:
                      description: The names of the security groups to assign to the
                        instance
                      items:
                        properties:
                          filter:
                            description: Filters used to query security groups in
                              openstack
                            properties:
                              description:
                                type: string
                              id:
                                type: string
                              limit:
                                type: integer
                              marker:
                                type: string
                              name:
                                type: string
                              notTags:
                                type: string
                              notTagsAny:
                                type: string
                              projectId:
                                type: string
                              sortDir:
                                type: string
                              sortKey:
                                type: string
                              tags:
                                type: string
                              tagsAny:
                                type: string
                              tenantId:
                                type: string
                            type: object
                          name:
                            description: Security Group name
                            type: string
                          uuid:
                            description: Security Group UID
                            type: string
                        type: object
                      type: array
                    serverMetadata:
                      additionalProperties:
                        type: string
                      description: Metadata mapping. Allows you to create a map of
                        key value pairs to add to the server instance.
                      type: object
                    sshKeyName:
                      description: The ssh key to inject in the instance
                      type: string
                    tags:
                      description: Machine tags Requires Nova api 2.52 minimum!
                      items:
                        type: string
                      type: array
                    trunk:
                      description: Whether the server instance is created on a trunk
                        port or not.
                      type: boolean
                    userDataSecret:
                      description: The name of the secret containing the user data
                        (startup script in most cases)
                      properties:
                        name:
                          description: Name is unique within a namespace to reference
                            a secret resource.
                          type: string
                        namespace:
                          description: Namespace defines the space within which the
                            secret name must be unique.
                          type: string
                      type: object
                  required:
                  - flavor
                  - image
                  type: object
              required:
              - spec
              type: object
          required:
          - template
          type: object
      type: object
  version: v1alpha2
  versions:
  - name: v1alpha2
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cabpk-leader-election-role
  namespace: cabpk-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: capi-leader-election-role
  namespace: capi-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: capo-leader-election-role
  namespace: capo-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: cabpk-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - events
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - bootstrap.cluster.x-k8s.io
  resources:
  - kubeadmconfigs
  - kubeadmconfigs/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusters
  - clusters/status
  - machines
  - machines/status
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cabpk-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: capi-manager-role
rules:
- apiGroups:
  - bootstrap.cluster.x-k8s.io
  - infrastructure.cluster.x-k8s.io
  resources:
  - '*'
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusters
  - clusters/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machinedeployments
  - machinedeployments/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machines
  - machines/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machinesets
  - machinesets/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - get
  - list
  - patch
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - get
  - list
  - patch
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: capo-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - events
  - secrets
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusters
  - clusters/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusters
  - machines
  - machines/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - infrastructure.cluster.x-k8s.io
  resources:
  - openstackclusters
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - infrastructure.cluster.x-k8s.io
  resources:
  - openstackclusters/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - infrastructure.cluster.x-k8s.io
  resources:
  - openstackmachines
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - infrastructure.cluster.x-k8s.io
  resources:
  - openstackmachines/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: capo-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cabpk-leader-election-rolebinding
  namespace: cabpk-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cabpk-leader-election-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: cabpk-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: capi-leader-election-rolebinding
  namespace: capi-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: capi-leader-election-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: capi-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: capo-leader-election-rolebinding
  namespace: capo-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: capo-leader-election-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: capo-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cabpk-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cabpk-manager-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: cabpk-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cabpk-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cabpk-proxy-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: cabpk-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  name: capi-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: capi-manager-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: capi-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: capo-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: capo-manager-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: capo-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: capo-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: capo-proxy-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: capo-system
---
apiVersion: v1
data:
  cacert: ZHVtbXkK
  clouds.yaml: Y2xvdWRzOgogIHRhY28tb3BlbnN0YWNrOgogICAgYXV0aDoKICAgICAgYXV0aF91cmw6IGh0dHA6Ly9rZXlzdG9uZS5vcGVuc3RhY2suc3ZjLmNsdXN0ZXIubG9jYWw6ODAvdjMKICAgICAgcHJvamVjdF9uYW1lOiB0YWNvCiAgICAgIHVzZXJuYW1lOiBuYWNobwogICAgICBwYXNzd29yZDogbmFjaG8KICAgICAgdXNlcl9kb21haW5fbmFtZTogRGVmYXVsdAogICAgICBwcm9qZWN0X2RvbWFpbl9uYW1lOiBEZWZhdWx0CiAgICAgIHByb2plY3RfaWQ6IDhhYTJlYTM4YTUyZDRjZDQ5ZmExYzc3ZDFmZTlkNjYzCiAgICByZWdpb25fbmFtZTogUmVnaW9uT25lCg==
kind: Secret
metadata:
  name: cloud-config
  namespace: taco-cluster
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8443"
    prometheus.io/scheme: https
    prometheus.io/scrape: "true"
  labels:
    control-plane: cabpk-controller-manager
  name: cabpk-controller-manager-metrics-service
  namespace: cabpk-system
spec:
  ports:
  - name: https
    port: 8443
    targetPort: https
  selector:
    control-plane: cabpk-controller-manager
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8443"
    prometheus.io/scheme: https
    prometheus.io/scrape: "true"
  labels:
    control-plane: capo-controller-manager
  name: capo-controller-manager-metrics-service
  namespace: capo-system
spec:
  ports:
  - name: https
    port: 8443
    targetPort: https
  selector:
    control-plane: capo-controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: cabpk-controller-manager
  name: cabpk-controller-manager
  namespace: cabpk-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: cabpk-controller-manager
  template:
    metadata:
      labels:
        control-plane: cabpk-controller-manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=10
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.4.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
      - args:
        - --metrics-addr=127.0.0.1:8080
        - --v=4
        - --enable-leader-election
        image: us.gcr.io/k8s-artifacts-prod/capi-kubeadm/cluster-api-kubeadm-controller:v0.1.2
        imagePullPolicy: Always
        name: manager
      terminationGracePeriodSeconds: 10
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - key: CriticalAddonsOnly
        operator: Exists
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: cluster-api-controller-manager
  name: capi-controller-manager
  namespace: capi-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: cluster-api-controller-manager
  template:
    metadata:
      labels:
        control-plane: cluster-api-controller-manager
    spec:
      containers:
      - args:
        - --enable-leader-election
        command:
        - /manager
        image: us.gcr.io/k8s-artifacts-prod/cluster-api/cluster-api-controller:v0.2.4
        imagePullPolicy: IfNotPresent
        name: manager
        resources:
          limits:
            memory: 100Mi
          requests:
            memory: 100Mi
      terminationGracePeriodSeconds: 10
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - key: CriticalAddonsOnly
        operator: Exists
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: capo-controller-manager
  name: capo-controller-manager
  namespace: capo-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: capo-controller-manager
  template:
    metadata:
      labels:
        control-plane: capo-controller-manager
    spec:
      containers:
      - args:
        - --enable-leader-election
        image: us.gcr.io/k8s-artifacts-prod/capi-openstack/capi-openstack-controller:v0.2.0
        imagePullPolicy: IfNotPresent
        name: manager
      terminationGracePeriodSeconds: 10
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - key: CriticalAddonsOnly
        operator: Exists
      hostAliases:
      - hostnames:
        - keystone.openstack.svc.cluster.local
        - glance.openstack.svc.cluster.local
        - nova.openstack.svc.cluster.local
        - neutron.openstack.svc.cluster.local
        - cinder.openstack.svc.cluster.local
        ip: 192.168.48.26
      hostNetwork: true
